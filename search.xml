<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pyqt基础知识</title>
      <link href="/2019/08/24/pyqt5%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/08/24/pyqt5%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><strong>pqqt基础知识汇总</strong></p><h3 id="第一个窗口"><a href="#第一个窗口" class="headerlink" title="第一个窗口"></a>第一个窗口</h3><p>1、if __name__ == “__main__“: 是代表如果这个文件是主程序这运行下面的代码，如果是被别的程序文件调用的话，则运行下面的代码。</p><p>2、__init __ 方法在类的一个对象被建立时，马上运行。这个方法可以用来对你的对象做一些你希望的 初始化 。注意，这个名称的开始和结尾都是双下划线。</p><p>3、生成实例（对象）必须以类名()，别忘记了()</p><p>4、类中的函数（方法）必须有self，是代表属于这个实例（对象）本身持有的，而外部定义的函数则不需要。</p><p>5、QApplication相当于main函数，也就是整个程序（有很多文件）的主入口函数。</p><p>​    对于一个Gui程序必须至少有一个这样的一个实例来让程序运行。</p><p>6、最后一句是调用sys库的exit退出方法，退出条件（参数）是app.exec_()也就是整个窗口关闭。</p><h3 id="Qt-Designer"><a href="#Qt-Designer" class="headerlink" title="Qt Designer"></a>Qt Designer</h3><p>1、记得在Qt Designer中窗体的layout层次可以通过对象查看器来查看，layout的一些设置可以通过属性编辑器来修该。</p><p>2、通常我们使用栅格布局作为顶层布局，将控件放置好之后可以通过右键–布局–栅格布局，将布局充满整个窗体。</p><p>3、我们可以先放入控件，然后ctrl选中多个控件，然后点击工具栏上快速布局工具进行布局。</p><p> 4、在mianwindows中默认会有个centralwidget布局也是继承自QtWidgets.QWidget，表示窗口的中央部分。</p><h3 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h3><p>信号和槽是一种高级接口，应用于对象之间的通信，它是 QT 的核心特性，也是 QT 区别于其它工具包的重要地方。它为高层次的事件处理自动生成所需要的附加代码。在我们所熟知的很多 GUI 工具包中，窗口小部件 (widget) 都有一个回调函数用于响应它们能触发的每个动作，这个回调函数通常是一个指向某个函数的指针。但是，在 QT 中信号和槽取代了这些凌乱的函数指针，使得我们编写这些通信程序更为简洁明了。<br><strong>所有从 QObject 或其子类 ( 例如 Qwidget) 派生的类都能够包含信号和槽。</strong>当对象改变其状态时，信号就由该对象发射 (emit) 出去，这就是对象所要做的全部事情，它不知道另一端是谁在接收这个信号。这就是真正的信息封装，它确保对象被当作一个真正的软件组件来使用。槽用于接收信号，但它们是普通的对象成员函数。<strong>一个槽并不知道是否有任何信号与自己相连接。而且，对象并不了解具体的通信机制。</strong><br>你可以将很多信号与单个的槽进行连接，也可以将单个的信号与很多的槽进行连接，甚至于将一个信号与另外一个信号相连接也是可能的，这时无论第一个信号什么时候发射系统都将立刻发射第二个信号。总之，信号与槽构造了一个强大的部件编程机制。</p><p>说实话对于像我这样的新手来说看着就蛋疼，想学会它没办法，我们还是简化一下概念吧：<br>所有QObject类都可以使用信号槽，换句话来说继承自pyqt中的类基本上都可以使用信号槽机制。当然非QObject也是可以通过其他一些办法来使用信号槽的。</p><p>仅仅有了信号和槽是不行的，我们还需要了解：<br>信号(Signal)、槽(slot)、连接(connect)、动作事件(action)、发射(emit)、发送者、接受者等等一些列的知识。</p><ol><li><p>在PyQt中接受者和发送者必须是个对象（实例）！</p></li><li><p>PyQt中的控件中提供了很多信号和槽方法，大家可以多多使用Qt Designer 设计参考！</p></li><li><p>槽其实就个函数（方法），Qt5中的槽函数不在限定必须是slot，可以是普通的函数、类的普通成员函数、lambda函数等。编译期间就会检查信号与槽是否存在！</p></li><li><p><strong>信号的connect连接最好放在__init__析构函数里面</strong>，这样只会声明一次连接，如果在类方法（函数中）使用的话，要记得disconnect，否则connect会连接多次，导致程序异常。</p></li><li><p><strong>信号槽函数不用加 ()</strong>，否则可能会导致连接异常。</p></li></ol><h3 id="自定义信号emit及传参"><a href="#自定义信号emit及传参" class="headerlink" title="自定义信号emit及传参"></a>自定义信号emit及传参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> f1 <span class="keyword">import</span> Ui_MainWindow</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets,QtCore</span><br><span class="line"><span class="keyword">import</span> sys,time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span><span class="params">(QtWidgets.QMainWindow, Ui_MainWindow)</span>:</span> <span class="comment"># 继承QWidget和Ui_MainWindow</span></span><br><span class="line">    _signal = QtCore.pyqtSignal() <span class="comment"># 定义信号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyWindow, self).__init__()</span><br><span class="line">        self.setupUi(self)          <span class="comment">#加载窗体</span></span><br><span class="line"></span><br><span class="line">        self.pushButton.clicked.connect(self.prn)     <span class="comment"># 按钮1链接到prn槽函数</span></span><br><span class="line">        <span class="comment"># self.pushButton_2.clicked.connect(self.prn)</span></span><br><span class="line">        self._signal.connect(self.mysignalslot)       <span class="comment"># 将信号连接到mysignalslot</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">prn</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'打印测试'</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'延时1秒'</span>)</span><br><span class="line">        self._signal.emit()     <span class="comment">#发射信号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mysignalslot</span><span class="params">(self)</span>:</span>     <span class="comment"># 自定义槽函数</span></span><br><span class="line">        print(<span class="string">'我是slot'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    mywindow = MyWindow()           <span class="comment"># 创建实例</span></span><br><span class="line">    mywindow.show()                 <span class="comment"># 使用QtWidgets的show()方法</span></span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>main.py的程序如上所示。实现功能：</p><p><img src="https://s2.ax1x.com/2019/08/25/mcs0Hg.png" alt="mcs0Hg.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pyqt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础</title>
      <link href="/2019/08/14/python%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/08/14/python%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="第一个python程序"><a href="#第一个python程序" class="headerlink" title="第一个python程序"></a>第一个python程序</h2><ol><li><p>在写代码之前，请千万不要用<strong>复制-粘贴</strong>把代码从页面粘贴到你自己的电脑上。写程序也讲究一个感觉，你需要一个字母一个字母地把代码自己敲进去，在敲代码的过程中，初学者经常会敲错代码：拼写不对，大小写不对，混用中英文标点，混用空格和Tab键，所以，你需要仔细地检查、对照，才能以最快的速度掌握如何写程序。</p></li><li><p>直接运行py</p></li></ol><p>有同学问，能不能像.exe文件那样直接运行.py文件呢？在Windows上是不行的，但是，在Mac和Linux上是可以的，方法是在.py文件的第一行加上一个特殊的注释：</p><blockquote><p>#!/usr/bin/env python3</p><p>print(‘hello, world’)</p></blockquote><p>然后，通过命令给hello.py以执行权限：</p><blockquote><p>$ chmod a+x hello.py</p></blockquote><p>就可以直接运行hello.py了</p><hr><h2 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h2><ol><li><p>空值<br>空值是Python里一个特殊的值，用<code>None</code>表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。</p></li><li></li></ol><p><code>/</code>除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数</p><p><code>//</code>，称为地板除，两个整数的除法仍然是整数</p><p><code>%</code>,取余</p><ol start="3"><li><p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换为对应的字符</p></li><li><p>以Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：</p></li></ol><blockquote><p>‘ABC’.encode(‘ascii’)</p><p>b’ABC’</p></blockquote><blockquote><p>‘中文’.encode(‘utf-8’)</p><p>b’\xe4\xb8\xad\xe6\x96\x87’</p></blockquote><p>要计算str包含多少个字符，可以用<code>len()</code>函数</p><ol start="5"><li><p>删除list的元素，用<code>pop(i)</code>方法,<code>i</code>为索引</p><blockquote><p>classmates.pop(i)</p></blockquote></li><li><p>list = []  ; tuple = () ; dict = { ‘ xiaoming  ‘:   15  ,}</p></li><li><p>要删除一个key，用<code>pop(key)</code>方法，对应的value也会从dict中删除</p></li><li><p>set  set和dict类似，也是一组key的集合，但不存储value。</p></li><li><p>再议不可变对象</p><p>上面我们讲了，str是不变对象，而list是可变对象。</p><p>对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = [&apos;c&apos;, &apos;b&apos;, &apos;a&apos;]</span><br><span class="line">&gt;&gt;&gt; a.sort()</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br></pre></td></tr></table></figure><p>而对于不可变对象，比如str，对str进行操作呢：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = &apos;abc&apos;</span><br><span class="line">&gt;&gt;&gt; a.replace(&apos;a&apos;, &apos;A&apos;)</span><br><span class="line">&apos;Abc&apos;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&apos;abc&apos;</span><br></pre></td></tr></table></figure><p>虽然字符串有个<code>replace()</code>方法，也确实变出了<code>&#39;Abc&#39;</code>，但变量<code>a</code>最后仍是<code>&#39;abc&#39;</code>，应该怎么理解呢？</p><p>我们先把代码改成下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = &apos;abc&apos;</span><br><span class="line">&gt;&gt;&gt; b = a.replace(&apos;a&apos;, &apos;A&apos;)</span><br><span class="line">&gt;&gt;&gt; b</span><br><span class="line">&apos;Abc&apos;</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">&apos;abc&apos;</span><br></pre></td></tr></table></figure><p>要始终牢记的是，<code>a</code>是变量，而<code>&#39;abc&#39;</code>才是字符串对象！有些时候，我们经常说，对象<code>a</code>的内容是<code>&#39;abc&#39;</code>，但其实是指，<code>a</code>本身是一个变量，它指向的对象的内容才是<code>&#39;abc&#39;</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌───┐                  ┌───────┐</span><br><span class="line">│ a │─────────────────&gt;│ &apos;abc&apos; │</span><br><span class="line">└───┘                  └───────┘</span><br></pre></td></tr></table></figure><p>当我们调用<code>a.replace(&#39;a&#39;, &#39;A&#39;)</code>时，实际上调用方法<code>replace</code>是作用在字符串对象<code>&#39;abc&#39;</code>上的，而这个方法虽然名字叫<code>replace</code>，但却没有改变字符串<code>&#39;abc&#39;</code>的内容。相反，<code>replace</code>方法创建了一个新字符串<code>&#39;Abc&#39;</code>并返回，如果我们用变量<code>b</code>指向该新字符串，就容易理解了，变量<code>a</code>仍指向原有的字符串<code>&#39;abc&#39;</code>，但变量<code>b</code>却指向新字符串<code>&#39;Abc&#39;</code>了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌───┐                  ┌───────┐</span><br><span class="line">│ a │─────────────────&gt;│ &apos;abc&apos; │</span><br><span class="line">└───┘                  └───────┘</span><br><span class="line">┌───┐                  ┌───────┐</span><br><span class="line">│ b │─────────────────&gt;│ &apos;Abc&apos; │</span><br><span class="line">└───┘                  └───────┘</span><br></pre></td></tr></table></figure><p>所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。</p></li><li><p>Python的循环有两种，一种是for…in循环，依次把list或tuple中的每个元素迭代出来，看例子：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    print(name)</span><br></pre></td></tr></table></figure><p>   执行这段代码，会依次打印<code>names</code>的每一个元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Michael</span><br><span class="line">Bob</span><br><span class="line">Tracy</span><br></pre></td></tr></table></figure><p>   第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sum = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    sum = sum + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><p>   在循环内部变量<code>n</code>不断自减，直到变为<code>-1</code>时，不再满足while条件，循环退出。</p><p>   另外的，</p><p>   如果要提前结束循环，可以用<code>break</code>语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">10</span>: <span class="comment"># 当n = 11时，条件满足，执行break语句</span></span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># break语句会结束当前循环</span></span><br><span class="line">    print(n)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">print(<span class="string">'END'</span>)</span><br></pre></td></tr></table></figure><p>   在循环过程中，也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>: <span class="comment"># 如果n是偶数，执行continue语句</span></span><br><span class="line">        <span class="keyword">continue</span> <span class="comment"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span></span><br><span class="line">    print(n)</span><br></pre></td></tr></table></figure><hr><h2 id="字符串方法及注释"><a href="#字符串方法及注释" class="headerlink" title="字符串方法及注释"></a>字符串方法及注释</h2><table><thead><tr><th>capitalize()</th><th>把字符串的第一个字符改为大写</th></tr></thead><tbody><tr><td>casefold()</td><td>把整个字符串的所有字符改为小写</td></tr><tr><td>center(width)</td><td>将字符串居中，并使用空格填充至长度 width 的新字符串</td></tr><tr><td>count(sub[, start[, end]])</td><td>返回 sub 在字符串里边出现的次数，start 和 end 参数表示范围，可选。</td></tr><tr><td>encode(encoding=’utf-8’, errors=’strict’)</td><td>以 encoding 指定的编码格式对字符串进行编码。</td></tr><tr><td>endswith(sub[, start[, end]])</td><td>检查字符串是否以 sub 子字符串结束，如果是返回 True，否则返回 False。start 和 end 参数表示范围，可选。</td></tr><tr><td>expandtabs([tabsize=8])</td><td>把字符串中的 tab 符号（\t）转换为空格，如不指定参数，默认的空格数是 tabsize=8。</td></tr><tr><td>find(sub[, start[, end]])</td><td>检测 sub 是否包含在字符串中，如果有则返回索引值，否则返回 -1，start 和 end 参数表示范围，可选。</td></tr><tr><td>index(sub[, start[, end]])</td><td>跟 find 方法一样，不过如果 sub 不在 string 中会产生一个异常。</td></tr><tr><td>isalnum()</td><td>如果字符串至少有一个字符并且所有字符都是字母或数字则返回 True，否则返回 False。</td></tr><tr><td>isalpha()</td><td>如果字符串至少有一个字符并且所有字符都是字母则返回 True，否则返回 False。</td></tr><tr><td>isdecimal()</td><td>如果字符串只包含十进制数字则返回 True，否则返回 False。</td></tr><tr><td>isdigit()</td><td>如果字符串只包含数字则返回 True，否则返回 False。</td></tr><tr><td>islower()</td><td>如果字符串中至少包含一个区分大小写的字符，并且这些字符都是小写，则返回 True，否则返回 False。</td></tr><tr><td>isnumeric()</td><td>如果字符串中只包含数字字符，则返回 True，否则返回 False。</td></tr><tr><td>isspace()</td><td>如果字符串中只包含空格，则返回 True，否则返回 False。</td></tr><tr><td>istitle()</td><td>如果字符串是标题化（所有的单词都是以大写开始，其余字母均小写），则返回 True，否则返回 False。</td></tr><tr><td>isupper()</td><td>如果字符串中至少包含一个区分大小写的字符，并且这些字符都是大写，则返回 True，否则返回 False。</td></tr><tr><td>join(sub)</td><td>以字符串作为分隔符，插入到 sub 中所有的字符之间。</td></tr><tr><td>ljust(width)</td><td>返回一个左对齐的字符串，并使用空格填充至长度为 width 的新字符串。</td></tr><tr><td>lower()</td><td>转换字符串中所有大写字符为小写。</td></tr><tr><td>lstrip()</td><td>去掉字符串左边的所有空格</td></tr><tr><td>partition(sub)</td><td>找到子字符串 sub，把字符串分成一个 3 元组 (pre_sub, sub, fol_sub)，如果字符串中不包含 sub 则返回 (‘原字符串’, ‘’, ‘’)</td></tr><tr><td>replace(old, new[, count])</td><td>把字符串中的 old 子字符串替换成 new 子字符串，如果 count 指定，则替换不超过 count 次。</td></tr><tr><td>rfind(sub[, start[, end]])</td><td>类似于 find() 方法，不过是从右边开始查找。</td></tr><tr><td>rindex(sub[, start[, end]])</td><td>类似于 index() 方法，不过是从右边开始。</td></tr><tr><td>rjust(width)</td><td>返回一个右对齐的字符串，并使用空格填充至长度为 width 的新字符串。</td></tr><tr><td>rpartition(sub)</td><td>类似于 partition() 方法，不过是从右边开始查找。</td></tr><tr><td>rstrip()</td><td>删除字符串末尾的空格。</td></tr><tr><td>split(sep=None, maxsplit=-1)</td><td>不带参数默认是以空格为分隔符切片字符串，如果 maxsplit 参数有设置，则仅分隔 maxsplit 个子字符串，返回切片后的子字符串拼接的列表。</td></tr><tr><td>splitlines(([keepends]))</td><td>在输出结果里是否去掉换行符，默认为 False，不包含换行符；如果为 True，则保留换行符。。</td></tr><tr><td>startswith(prefix[, start[, end]])</td><td>检查字符串是否以 prefix 开头，是则返回 True，否则返回 False。start 和 end 参数可以指定范围检查，可选。</td></tr><tr><td>strip([chars])</td><td>删除字符串前边和后边所有的空格，chars 参数可以定制删除的字符，可选。</td></tr><tr><td>swapcase()</td><td>翻转字符串中的大小写。</td></tr><tr><td>title()</td><td>返回标题化（所有的单词都是以大写开始，其余字母均小写）的字符串。</td></tr><tr><td>translate(table)</td><td>根据 table 的规则（可以由 str.maketrans(‘a’, ‘b’) 定制）转换字符串中的字符。</td></tr><tr><td>upper()</td><td>转换字符串中的所有小写字符为大写。</td></tr><tr><td>zfill(width)</td><td>返回长度为 width 的字符串，原字符串右对齐，前边用 0 填充。</td></tr></tbody></table><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p> <strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p><p>为什么要设计<code>str</code>、<code>None</code>这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</p><hr><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p><strong>文件打开模式</strong></p><table><thead><tr><th><strong>打开模式</strong></th><th><strong>执行操作</strong></th></tr></thead><tbody><tr><td>‘r’</td><td>以只读方式打开文件（默认）</td></tr><tr><td>‘w’</td><td>以写入的方式打开文件，会覆盖已存在的文件</td></tr><tr><td>‘x’</td><td>如果文件已经存在，使用此模式打开将引发异常</td></tr><tr><td>‘a’</td><td>以写入模式打开，如果文件存在，则在末尾追加写入</td></tr><tr><td>‘b’</td><td>以二进制模式打开文件</td></tr><tr><td>‘t’</td><td>以文本模式打开（默认）</td></tr><tr><td>‘+’</td><td>可读写模式（可添加到其他模式中使用）</td></tr><tr><td>‘U’</td><td>通用换行符支持</td></tr></tbody></table><p>​    <strong>文件对象方法</strong></p><table><thead><tr><th><strong>文件对象方法</strong></th><th><strong>执行操作</strong></th></tr></thead><tbody><tr><td>f.close()</td><td>关闭文件</td></tr><tr><td>f.read([size=-1])</td><td>从文件读取size个字符，当未给定size或给定负值的时候，读取剩余的所有字符，然后作为字符串返回</td></tr><tr><td>f.readline([size=-1])</td><td>从文件中读取并返回一行（包括行结束符），如果有size有定义则返回size个字符</td></tr><tr><td>f.write(str)</td><td>将字符串str写入文件</td></tr><tr><td>f.writelines(seq)</td><td>向文件写入字符串序列seq，seq应该是一个返回字符串的可迭代对象</td></tr><tr><td>f.seek(offset, from)</td><td>在文件中移动文件指针，从from（0代表文件起始位置，1代表当前位置，2代表文件末尾）偏移offset个字节</td></tr><tr><td>f.tell()</td><td>返回当前在文件中的位置</td></tr><tr><td>f.truncate([size=file.tell()])</td><td>截取文件到size个字节，默认是截取到文件指针当前位置</td></tr></tbody></table><p><strong>OS模块</strong></p><p><strong>os模块中关于文件/目录常用的函数使用方法</strong></p><table><thead><tr><th><strong>函数名</strong></th><th><strong>使用方法</strong></th></tr></thead><tbody><tr><td>getcwd()</td><td>返回当前工作目录</td></tr><tr><td>chdir(path)</td><td>改变工作目录</td></tr><tr><td>listdir(path=’.’)</td><td>列举指定目录中的文件名（’.’表示当前目录，’..’表示上一级目录）</td></tr><tr><td>mkdir(path)</td><td>创建单层目录，如该目录已存在抛出异常</td></tr><tr><td>makedirs(path)</td><td>递归创建多层目录，如该目录已存在抛出异常，注意：’E:\a\b’和’E:\a\c’并不会冲突</td></tr><tr><td>remove(path)</td><td>删除文件</td></tr><tr><td>rmdir(path)</td><td>删除单层目录，如该目录非空则抛出异常</td></tr><tr><td>removedirs(path)</td><td>递归删除目录，从子目录到父目录逐层尝试删除，遇到目录非空则抛出异常</td></tr><tr><td>rename(old, new)</td><td>将文件old重命名为new</td></tr><tr><td>system(command)</td><td>运行系统的shell命令</td></tr><tr><td>walk(top)</td><td>遍历top路径以下所有的子目录，返回一个三元组：(路径, [包含目录], [包含文件])【具体实现方案请看：第30讲课后作业^_^】</td></tr><tr><td><em>以下是支持路径操作中常用到的一些定义，支持所有平台</em></td><td></td></tr><tr><td>os.curdir</td><td>指代当前目录（’.’）</td></tr><tr><td>os.pardir</td><td>指代上一级目录（’..’）</td></tr><tr><td>os.sep</td><td>输出操作系统特定的路径分隔符（Win下为’\‘，Linux下为’/‘）</td></tr><tr><td>os.linesep</td><td>当前平台使用的行终止符（Win下为’\r\n’，Linux下为’\n’）</td></tr><tr><td>os.name</td><td>指代当前使用的操作系统（包括：’posix’,  ‘nt’, ‘mac’, ‘os2’, ‘ce’, ‘java’）</td></tr></tbody></table><p><strong><strong>os.path模块中关于路径常用的函数使用方法</strong></strong></p><table><thead><tr><th><strong>函数名</strong></th><th><strong>使用方法</strong></th></tr></thead><tbody><tr><td>basename(path)</td><td>去掉目录路径，单独返回文件名</td></tr><tr><td>dirname(path)</td><td>去掉文件名，单独返回目录路径</td></tr><tr><td>join(path1[, path2[, …]])</td><td>将path1, path2各部分组合成一个路径名</td></tr><tr><td>split(path)</td><td>分割文件名与路径，返回(f_path, f_name)元组。如果完全使用目录，它也会将最后一个目录作为文件名分离，且不会判断文件或者目录是否存在</td></tr><tr><td>splitext(path)</td><td>分离文件名与扩展名，返回(f_name, f_extension)元组</td></tr><tr><td>getsize(file)</td><td>返回指定文件的尺寸，单位是字节</td></tr><tr><td>getatime(file)</td><td>返回指定文件最近的访问时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td>getctime(file)</td><td>返回指定文件的创建时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td>getmtime(file)</td><td>返回指定文件最新的修改时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td><em>以下为函数返回 True 或 False</em></td><td></td></tr><tr><td>exists(path)</td><td>判断指定路径（目录或文件）是否存在</td></tr><tr><td>isabs(path)</td><td>判断指定路径是否为绝对路径</td></tr><tr><td>isdir(path)</td><td>判断指定路径是否存在且是一个目录</td></tr><tr><td>isfile(path)</td><td>判断指定路径是否存在且是一个文件</td></tr><tr><td>islink(path)</td><td>判断指定路径是否存在且是一个符号链接</td></tr><tr><td>ismount(path)</td><td>判断指定路径是否存在且是一个挂载点</td></tr><tr><td>samefile(path1, paht2)</td><td>判断path1和path2两个路径是否指向同一个文件</td></tr></tbody></table><hr><h2 id="标准异常"><a href="#标准异常" class="headerlink" title="标准异常"></a>标准异常</h2><p><strong>Python标准异常总结</strong></p><table><thead><tr><th>AssertionError</th><th>断言语句（assert）失败</th></tr></thead><tbody><tr><td>AttributeError</td><td>尝试访问未知的对象属性</td></tr><tr><td>EOFError</td><td>用户输入文件末尾标志EOF（Ctrl+d）</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>GeneratorExit</td><td>generator.close()方法被调用的时候</td></tr><tr><td>ImportError</td><td>导入模块失败的时候</td></tr><tr><td>IndexError</td><td>索引超出序列的范围</td></tr><tr><td>KeyError</td><td>字典中查找一个不存在的关键字</td></tr><tr><td>KeyboardInterrupt</td><td>用户输入中断键（Ctrl+c）</td></tr><tr><td>MemoryError</td><td>内存溢出（可通过删除对象释放内存）</td></tr><tr><td>NameError</td><td>尝试访问一个不存在的变量</td></tr><tr><td>NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td>OSError</td><td>操作系统产生的异常（例如打开一个不存在的文件）</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>ReferenceError</td><td>弱引用（weak reference）试图访问一个已经被垃圾回收机制回收了的对象</td></tr><tr><td>RuntimeError</td><td>一般的运行时错误</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>SyntaxError</td><td>Python的语法错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>TabError</td><td>Tab和空格混合使用</td></tr><tr><td>SystemError</td><td>Python编译器系统错误</td></tr><tr><td>SystemExit</td><td>Python编译器进程被关闭</td></tr><tr><td>TypeError</td><td>不同类型间的无效操作</td></tr><tr><td>UnboundLocalError</td><td>访问一个未初始化的本地变量（NameError的子类）</td></tr><tr><td>UnicodeError</td><td>Unicode相关的错误（ValueError的子类）</td></tr><tr><td>UnicodeEncodeError</td><td>Unicode编码时的错误（UnicodeError的子类）</td></tr><tr><td>UnicodeDecodeError</td><td>Unicode解码时的错误（UnicodeError的子类）</td></tr><tr><td>UnicodeTranslateError</td><td>Unicode转换时的错误（UnicodeError的子类）</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>ZeroDivisionError</td><td>除数为零</td></tr></tbody></table><p><strong>以下是 Python 内置异常类的层次结构：</strong></p><p>BaseException<br>+– SystemExit<br>+– KeyboardInterrupt<br>+– GeneratorExit<br>+– Exception<br>      +– StopIteration<br>      +– ArithmeticError<br>      |    +– FloatingPointError<br>      |    +– OverflowError<br>      |    +– ZeroDivisionError<br>      +– AssertionError<br>      +– AttributeError<br>      +– BufferError<br>      +– EOFError<br>      +– ImportError<br>      +– LookupError<br>      |    +– IndexError<br>      |    +– KeyError<br>      +– MemoryError<br>      +– NameError<br>      |    +– UnboundLocalError<br>      +– OSError<br>      |    +– BlockingIOError<br>      |    +– ChildProcessError<br>      |    +– ConnectionError<br>      |    |    +– BrokenPipeError<br>      |    |    +– ConnectionAbortedError<br>      |    |    +– ConnectionRefusedError<br>      |    |    +– ConnectionResetError<br>      |    +– FileExistsError<br>      |    +– FileNotFoundError<br>      |    +– InterruptedError<br>      |    +– IsADirectoryError<br>      |    +– NotADirectoryError<br>      |    +– PermissionError<br>      |    +– ProcessLookupError<br>      |    +– TimeoutError<br>      +– ReferenceError<br>      +– RuntimeError<br>      |    +– NotImplementedError<br>      +– SyntaxError<br>      |    +– IndentationError<br>      |         +– TabError<br>      +– SystemError<br>      +– TypeError<br>      +– ValueError<br>      |    +– UnicodeError<br>      |         +– UnicodeDecodeError<br>      |         +– UnicodeEncodeError<br>      |         +– UnicodeTranslateError<br>      +– Warning<br>           +– DeprecationWarning<br>           +– PendingDeprecationWarning<br>           +– RuntimeWarning<br>           +– SyntaxWarning<br>           +– UserWarning<br>           +– FutureWarning<br>           +– ImportWarning<br>           +– UnicodeWarning<br>           +– BytesWarning<br>           +– ResourceWarning</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p><strong>对象 = 属性 + 方法</strong></p><p>类是为了让对象实现量产.</p><p>self指的是<strong>类实例对象本身</strong>(注意：不是类本身)</p><p>若子类会覆盖父类的<code>__init__</code>时，可采用(1)调用父类 <code>父类.__init__(self)</code>   (2) <code>supur().__init__()</code></p><h4 id="import"><a href="#import" class="headerlink" title="import"></a>import</h4><p>在Python中，如果import的语句比较长，导致后续引用不方便，可以使用as语法，比如：</p><p><code>import dir1.dir2.mod</code></p><p>那么，后续对mod的引用，都必须是dir1.dir2.mod</p><p><code>dir1.dir2.mod.X</code><br>那么，为了简化输入，可以使用as语法：</p><p><code>import dir1.dir2.mod as m</code></p><p>那么，后续对mod的引用，可以直接使用m</p><p><code>m. X</code></p><p>需要注意的是，使用as语法之后，只能通过as后面名字来访问导入的moudle</p><p><code>import mod as mm.X  # OKmod.X # Error</code></p><p>下面提供as的完整语法格式，import和from都支持：</p><p><code>import modulename as name  # 只能通过name来引用</code></p><p><code>from modulename import attrname as name  # 只能通过name来引用</code></p><h2 id="魔法方法-左右两边两个下划线"><a href="#魔法方法-左右两边两个下划线" class="headerlink" title="魔法方法(左右两边两个下划线)"></a>魔法方法(左右两边两个下划线)</h2><table><thead><tr><th><strong>魔法方法</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td></td><td><strong>基本的魔法方法</strong></td></tr><tr><td><strong>new</strong>(cls[, …])</td><td>1. <strong>new</strong> 是在一个对象实例化的时候所调用的第一个方法 2. 它的第一个参数是这个类，其他的参数是用来直接传递给 <strong>init</strong> 方法 3. <strong>new</strong> 决定是否要使用该 <strong>init</strong> 方法，因为 <strong>new</strong> 可以调用其他类的构造方法或者直接返回别的实例对象来作为本类的实例，如果 <strong>new</strong> 没有返回实例对象，则 <strong>init</strong> 不会被调用 4. <strong>new</strong> 主要是用于继承一个不可变的类型比如一个 tuple 或者 string</td></tr><tr><td><strong>init</strong>(self[, …])</td><td>构造器，当一个实例被创建的时候调用的初始化方法</td></tr><tr><td><strong>del</strong>(self)</td><td>析构器，当一个实例被销毁的时候调用的方法</td></tr><tr><td><strong>call</strong>(self[, args…])</td><td>允许一个类的实例像函数一样被调用：x(a, b) 调用 x.<strong>call</strong>(a, b)</td></tr><tr><td><strong>len</strong>(self)</td><td>定义当被 len() 调用时的行为</td></tr><tr><td><strong>repr</strong>(self)</td><td>定义当被 repr() 调用时的行为</td></tr><tr><td><strong>str</strong>(self)</td><td>定义当被 str() 调用时的行为</td></tr><tr><td><strong>bytes</strong>(self)</td><td>定义当被 bytes() 调用时的行为</td></tr><tr><td><strong>hash</strong>(self)</td><td>定义当被 hash() 调用时的行为</td></tr><tr><td><strong>bool</strong>(self)</td><td>定义当被 bool() 调用时的行为，应该返回 True 或 False</td></tr><tr><td><strong>format</strong>(self, format_spec)</td><td>定义当被 format() 调用时的行为</td></tr><tr><td></td><td><strong>有关属性</strong></td></tr><tr><td><strong>getattr</strong>(self, name)</td><td>定义当用户试图获取一个不存在的属性时的行为</td></tr><tr><td><strong>getattribute</strong>(self, name)</td><td>定义当该类的属性被访问时的行为</td></tr><tr><td><strong>setattr</strong>(self, name, value)</td><td>定义当一个属性被设置时的行为</td></tr><tr><td><strong>delattr</strong>(self, name)</td><td>定义当一个属性被删除时的行为</td></tr><tr><td><strong>dir</strong>(self)</td><td>定义当 dir() 被调用时的行为</td></tr><tr><td><strong>get</strong>(self, instance, owner)</td><td>定义当描述符的值被取得时的行为</td></tr><tr><td><strong>set</strong>(self, instance, value)</td><td>定义当描述符的值被改变时的行为</td></tr><tr><td><strong>delete</strong>(self, instance)</td><td>定义当描述符的值被删除时的行为</td></tr><tr><td></td><td><strong>比较操作符</strong></td></tr><tr><td><strong>lt</strong>(self, other)</td><td>定义小于号的行为：x &lt; y 调用 x.<strong>lt</strong>(y)</td></tr><tr><td><strong>le</strong>(self, other)</td><td>定义小于等于号的行为：x &lt;= y 调用 x.<strong>le</strong>(y)</td></tr><tr><td><strong>eq</strong>(self, other)</td><td>定义等于号的行为：x == y 调用 x.<strong>eq</strong>(y)</td></tr><tr><td><strong>ne</strong>(self, other)</td><td>定义不等号的行为：x != y 调用 x.<strong>ne</strong>(y)</td></tr><tr><td><strong>gt</strong>(self, other)</td><td>定义大于号的行为：x &gt; y 调用 x.<strong>gt</strong>(y)</td></tr><tr><td><strong>ge</strong>(self, other)</td><td>定义大于等于号的行为：x &gt;= y 调用 x.<strong>ge</strong>(y)</td></tr><tr><td></td><td><strong>算数运算符</strong></td></tr><tr><td><strong>add</strong>(self, other)</td><td>定义加法的行为：+</td></tr><tr><td><strong>sub</strong>(self, other)</td><td>定义减法的行为：-</td></tr><tr><td><strong>mul</strong>(self, other)</td><td>定义乘法的行为：*</td></tr><tr><td><strong>truediv</strong>(self, other)</td><td>定义真除法的行为：/</td></tr><tr><td><strong>floordiv</strong>(self, other)</td><td>定义整数除法的行为：//</td></tr><tr><td><strong>mod</strong>(self, other)</td><td>定义取模算法的行为：%</td></tr><tr><td><strong>divmod</strong>(self, other)</td><td>定义当被 divmod() 调用时的行为</td></tr><tr><td><strong>pow</strong>(self, other[, modulo])</td><td>定义当被 power() 调用或 ** 运算时的行为</td></tr><tr><td><strong>lshift</strong>(self, other)</td><td>定义按位左移位的行为：&lt;&lt;</td></tr><tr><td><strong>rshift</strong>(self, other)</td><td>定义按位右移位的行为：&gt;&gt;</td></tr><tr><td><strong>and</strong>(self, other)</td><td>定义按位与操作的行为：&amp;</td></tr><tr><td><strong>xor</strong>(self, other)</td><td>定义按位异或操作的行为：^</td></tr><tr><td><strong>or</strong>(self, other)</td><td>定义按位或操作的行为：|</td></tr><tr><td></td><td><strong>反运算</strong></td></tr><tr><td><strong>radd</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>rsub</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>rmul</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>rtruediv</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>rfloordiv</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>rmod</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>rdivmod</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>rpow</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>rlshift</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>rrshift</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>rand</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>rxor</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td><strong>ror</strong>(self, other)</td><td>（与上方相同，当左操作数不支持相应的操作时被调用）</td></tr><tr><td></td><td><strong>增量赋值运算</strong></td></tr><tr><td><strong>iadd</strong>(self, other)</td><td>定义赋值加法的行为：+=</td></tr><tr><td><strong>isub</strong>(self, other)</td><td>定义赋值减法的行为：-=</td></tr><tr><td><strong>imul</strong>(self, other)</td><td>定义赋值乘法的行为：*=</td></tr><tr><td><strong>itruediv</strong>(self, other)</td><td>定义赋值真除法的行为：/=</td></tr><tr><td><strong>ifloordiv</strong>(self, other)</td><td>定义赋值整数除法的行为：//=</td></tr><tr><td><strong>imod</strong>(self, other)</td><td>定义赋值取模算法的行为：%=</td></tr><tr><td><strong>ipow</strong>(self, other[, modulo])</td><td>定义赋值幂运算的行为：**=</td></tr><tr><td><strong>ilshift</strong>(self, other)</td><td>定义赋值按位左移位的行为：&lt;&lt;=</td></tr><tr><td><strong>irshift</strong>(self, other)</td><td>定义赋值按位右移位的行为：&gt;&gt;=</td></tr><tr><td><strong>iand</strong>(self, other)</td><td>定义赋值按位与操作的行为：&amp;=</td></tr><tr><td><strong>ixor</strong>(self, other)</td><td>定义赋值按位异或操作的行为：^=</td></tr><tr><td><strong>ior</strong>(self, other)</td><td>定义赋值按位或操作的行为：|=</td></tr><tr><td></td><td><strong>一元操作符</strong></td></tr><tr><td><strong>pos</strong>(self)</td><td>定义正号的行为：+x</td></tr><tr><td><strong>neg</strong>(self)</td><td>定义负号的行为：-x</td></tr><tr><td><strong>abs</strong>(self)</td><td>定义当被 abs() 调用时的行为</td></tr><tr><td><strong>invert</strong>(self)</td><td>定义按位求反的行为：~x</td></tr><tr><td></td><td><strong>类型转换</strong></td></tr><tr><td><strong>complex</strong>(self)</td><td>定义当被 complex() 调用时的行为（需要返回恰当的值）</td></tr><tr><td><strong>int</strong>(self)</td><td>定义当被 int() 调用时的行为（需要返回恰当的值）</td></tr><tr><td><strong>float</strong>(self)</td><td>定义当被 float() 调用时的行为（需要返回恰当的值）</td></tr><tr><td><strong>round</strong>(self[, n])</td><td>定义当被 round() 调用时的行为（需要返回恰当的值）</td></tr><tr><td><strong>index</strong>(self)</td><td>1. 当对象是被应用在切片表达式中时，实现整形强制转换 2. 如果你定义了一个可能在切片时用到的定制的数值型,你应该定义 <strong>index</strong> 3. 如果 <strong>index</strong> 被定义，则 <strong>int</strong> 也需要被定义，且返回相同的值</td></tr><tr><td></td><td><strong>上下文管理（with 语句）</strong></td></tr><tr><td><strong>enter</strong>(self)</td><td>1. 定义当使用 with 语句时的初始化行为 2. <strong>enter</strong> 的返回值被 with 语句的目标或者 as 后的名字绑定</td></tr><tr><td><strong>exit</strong>(self, exc_type, exc_value, traceback)</td><td>1. 定义当一个代码块被执行或者终止后上下文管理器应该做什么 2. 一般被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作</td></tr><tr><td></td><td><strong>容器类型</strong></td></tr><tr><td><strong>len</strong>(self)</td><td>定义当被 len() 调用时的行为（返回容器中元素的个数）</td></tr><tr><td><strong>getitem</strong>(self, key)</td><td>定义获取容器中指定元素的行为，相当于 self[key]</td></tr><tr><td><strong>setitem</strong>(self, key, value)</td><td>定义设置容器中指定元素的行为，相当于 self[key] = value</td></tr><tr><td><strong>delitem</strong>(self, key)</td><td>定义删除容器中指定元素的行为，相当于 del self[key]</td></tr><tr><td><strong>iter</strong>(self)</td><td>定义当迭代容器中的元素的行为</td></tr><tr><td><strong>reversed</strong>(self)</td><td>定义当被 reversed() 调用时的行为</td></tr><tr><td><strong>contains</strong>(self, item)</td><td>定义当使用成员测试运算符（in 或 not in）时的行为</td></tr></tbody></table><h2 id="super-不是父类，而是继承顺序的下一个类"><a href="#super-不是父类，而是继承顺序的下一个类" class="headerlink" title="super()不是父类，而是继承顺序的下一个类"></a>super()不是父类，而是继承顺序的下一个类</h2><p>super()可以避免重复调用</p><p>如果childA基础Base, childB继承childA和Base，如果childB需要调用Base的<strong>init</strong>()方法时，就会导致<strong>init</strong>()被执行两次：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Base create'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">childA</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'enter A '</span></span><br><span class="line">        Base.__init__(self)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'leave A'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">childB</span><span class="params">(childA, Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        childA.__init__(self)</span><br><span class="line">        Base.__init__(self)</span><br><span class="line"></span><br><span class="line">b = childB()</span><br></pre></td></tr></table></figure><p>Base的<strong>init</strong>()方法被执行了两次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">enter A </span><br><span class="line">Base create</span><br><span class="line">leave A</span><br><span class="line">Base create</span><br></pre></td></tr></table></figure><p>使用super()是可避免重复调用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Base create'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">childA</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'enter A '</span></span><br><span class="line">        super(childA, self).__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'leave A'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">childB</span><span class="params">(childA, Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(childB, self).__init__()</span><br><span class="line"></span><br><span class="line">b = childB()</span><br><span class="line"><span class="keyword">print</span> b.__class__.mro()</span><br><span class="line">enter A </span><br><span class="line">Base create</span><br><span class="line">leave A</span><br><span class="line">[&lt;class '__main__.childB'&gt;, &lt;class '__main__.childA'&gt;, &lt;class '__main__.Base'&gt;, &lt;type 'object'&gt;]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSP开发板灯光控制上位机</title>
      <link href="/2019/08/12/DSP%E5%BC%80%E5%8F%91%E6%9D%BF%E7%81%AF%E5%85%89%E6%8E%A7%E5%88%B6%E4%B8%8A%E4%BD%8D%E6%9C%BA/"/>
      <url>/2019/08/12/DSP%E5%BC%80%E5%8F%91%E6%9D%BF%E7%81%AF%E5%85%89%E6%8E%A7%E5%88%B6%E4%B8%8A%E4%BD%8D%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>在前几天对PYQT5的学习以后，自己试着做了一个上位机 来对DSP开发板实现LED亮灭操作。</p><p>软硬件:pycharm + PYQT5 + CCS6.0 + DSP开发板</p><h2 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h2><p>上位机界面<br><img src="https://s2.ax1x.com/2019/08/12/mSdSbj.png" alt="mSdSbj.png"></p><p>LED控制  </p><p>描述：当按下 &lt;打开1灯&gt;时 1亮、2灭。当按下 &lt;打开2灯&gt;时 2亮、1灭。</p><p><img src="https://s2.ax1x.com/2019/08/12/mSBOoj.jpg" alt="mSBOoj.jpg"></p><p><img src="https://s2.ax1x.com/2019/08/12/mSBLwQ.jpg" alt="mSBLwQ.jpg"></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li><p>在CCS对GPIO进行写操作时(GPXDTA.bit = ) 无法成功写入，在顺华师兄建议下 改用SET CLEAR操作解决. 至于为何DAT不好用还未知？</p></li><li><p>关于串口发送 16进制问题</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><blockquote><p>ui_demo.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Form implementation generated from reading ui file 'ui_demo_1.ui'</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Created by: PyQt5 UI code generator 5.11.3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># WARNING! All changes made in this file will be lost!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore, QtGui, QtWidgets</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ui_Form</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setupUi</span><span class="params">(self, Form)</span>:</span></span><br><span class="line">        Form.setObjectName(<span class="string">"Form"</span>)</span><br><span class="line">        Form.resize(<span class="number">868</span>, <span class="number">452</span>)</span><br><span class="line">        self.formGroupBox = QtWidgets.QGroupBox(Form)</span><br><span class="line">        self.formGroupBox.setGeometry(QtCore.QRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">167</span>, <span class="number">301</span>))</span><br><span class="line">        self.formGroupBox.setObjectName(<span class="string">"formGroupBox"</span>)</span><br><span class="line">        self.formLayout = QtWidgets.QFormLayout(self.formGroupBox)</span><br><span class="line">        self.formLayout.setContentsMargins(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        self.formLayout.setSpacing(<span class="number">10</span>)</span><br><span class="line">        self.formLayout.setObjectName(<span class="string">"formLayout"</span>)</span><br><span class="line">        self.s1__lb_1 = QtWidgets.QLabel(self.formGroupBox)</span><br><span class="line">        self.s1__lb_1.setObjectName(<span class="string">"s1__lb_1"</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">0</span>, QtWidgets.QFormLayout.LabelRole, self.s1__lb_1)</span><br><span class="line">        self.s1__box_1 = QtWidgets.QPushButton(self.formGroupBox)</span><br><span class="line">        self.s1__box_1.setAutoRepeatInterval(<span class="number">100</span>)</span><br><span class="line">        self.s1__box_1.setDefault(<span class="literal">True</span>)</span><br><span class="line">        self.s1__box_1.setObjectName(<span class="string">"s1__box_1"</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">0</span>, QtWidgets.QFormLayout.FieldRole, self.s1__box_1)</span><br><span class="line">        self.s1__lb_2 = QtWidgets.QLabel(self.formGroupBox)</span><br><span class="line">        self.s1__lb_2.setObjectName(<span class="string">"s1__lb_2"</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">1</span>, QtWidgets.QFormLayout.LabelRole, self.s1__lb_2)</span><br><span class="line">        self.s1__box_2 = QtWidgets.QComboBox(self.formGroupBox)</span><br><span class="line">        self.s1__box_2.setObjectName(<span class="string">"s1__box_2"</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">1</span>, QtWidgets.QFormLayout.FieldRole, self.s1__box_2)</span><br><span class="line">        self.s1__lb_3 = QtWidgets.QLabel(self.formGroupBox)</span><br><span class="line">        self.s1__lb_3.setObjectName(<span class="string">"s1__lb_3"</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">3</span>, QtWidgets.QFormLayout.LabelRole, self.s1__lb_3)</span><br><span class="line">        self.s1__box_3 = QtWidgets.QComboBox(self.formGroupBox)</span><br><span class="line">        self.s1__box_3.setObjectName(<span class="string">"s1__box_3"</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_3.addItem(<span class="string">""</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">3</span>, QtWidgets.QFormLayout.FieldRole, self.s1__box_3)</span><br><span class="line">        self.s1__lb_4 = QtWidgets.QLabel(self.formGroupBox)</span><br><span class="line">        self.s1__lb_4.setObjectName(<span class="string">"s1__lb_4"</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">4</span>, QtWidgets.QFormLayout.LabelRole, self.s1__lb_4)</span><br><span class="line">        self.s1__box_4 = QtWidgets.QComboBox(self.formGroupBox)</span><br><span class="line">        self.s1__box_4.setObjectName(<span class="string">"s1__box_4"</span>)</span><br><span class="line">        self.s1__box_4.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_4.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_4.addItem(<span class="string">""</span>)</span><br><span class="line">        self.s1__box_4.addItem(<span class="string">""</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">4</span>, QtWidgets.QFormLayout.FieldRole, self.s1__box_4)</span><br><span class="line">        self.s1__lb_5 = QtWidgets.QLabel(self.formGroupBox)</span><br><span class="line">        self.s1__lb_5.setObjectName(<span class="string">"s1__lb_5"</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">5</span>, QtWidgets.QFormLayout.LabelRole, self.s1__lb_5)</span><br><span class="line">        self.s1__box_5 = QtWidgets.QComboBox(self.formGroupBox)</span><br><span class="line">        self.s1__box_5.setObjectName(<span class="string">"s1__box_5"</span>)</span><br><span class="line">        self.s1__box_5.addItem(<span class="string">""</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">5</span>, QtWidgets.QFormLayout.FieldRole, self.s1__box_5)</span><br><span class="line">        self.open_button = QtWidgets.QPushButton(self.formGroupBox)</span><br><span class="line">        self.open_button.setObjectName(<span class="string">"open_button"</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">7</span>, QtWidgets.QFormLayout.SpanningRole, self.open_button)</span><br><span class="line">        self.close_button = QtWidgets.QPushButton(self.formGroupBox)</span><br><span class="line">        self.close_button.setObjectName(<span class="string">"close_button"</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">8</span>, QtWidgets.QFormLayout.SpanningRole, self.close_button)</span><br><span class="line">        self.s1__lb_6 = QtWidgets.QLabel(self.formGroupBox)</span><br><span class="line">        self.s1__lb_6.setObjectName(<span class="string">"s1__lb_6"</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">6</span>, QtWidgets.QFormLayout.LabelRole, self.s1__lb_6)</span><br><span class="line">        self.s1__box_6 = QtWidgets.QComboBox(self.formGroupBox)</span><br><span class="line">        self.s1__box_6.setObjectName(<span class="string">"s1__box_6"</span>)</span><br><span class="line">        self.s1__box_6.addItem(<span class="string">""</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">6</span>, QtWidgets.QFormLayout.FieldRole, self.s1__box_6)</span><br><span class="line">        self.state_label = QtWidgets.QLabel(self.formGroupBox)</span><br><span class="line">        self.state_label.setText(<span class="string">""</span>)</span><br><span class="line">        self.state_label.setTextFormat(QtCore.Qt.AutoText)</span><br><span class="line">        self.state_label.setScaledContents(<span class="literal">True</span>)</span><br><span class="line">        self.state_label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)</span><br><span class="line">        self.state_label.setObjectName(<span class="string">"state_label"</span>)</span><br><span class="line">        self.formLayout.setWidget(<span class="number">2</span>, QtWidgets.QFormLayout.SpanningRole, self.state_label)</span><br><span class="line">        self.verticalGroupBox = QtWidgets.QGroupBox(Form)</span><br><span class="line">        self.verticalGroupBox.setGeometry(QtCore.QRect(<span class="number">210</span>, <span class="number">20</span>, <span class="number">401</span>, <span class="number">241</span>))</span><br><span class="line">        self.verticalGroupBox.setObjectName(<span class="string">"verticalGroupBox"</span>)</span><br><span class="line">        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalGroupBox)</span><br><span class="line">        self.verticalLayout.setContentsMargins(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        self.verticalLayout.setObjectName(<span class="string">"verticalLayout"</span>)</span><br><span class="line">        self.s2__receive_text = QtWidgets.QTextBrowser(self.verticalGroupBox)</span><br><span class="line">        self.s2__receive_text.setObjectName(<span class="string">"s2__receive_text"</span>)</span><br><span class="line">        self.verticalLayout.addWidget(self.s2__receive_text)</span><br><span class="line">        self.verticalGroupBox_2 = QtWidgets.QGroupBox(Form)</span><br><span class="line">        self.verticalGroupBox_2.setGeometry(QtCore.QRect(<span class="number">210</span>, <span class="number">280</span>, <span class="number">401</span>, <span class="number">101</span>))</span><br><span class="line">        self.verticalGroupBox_2.setObjectName(<span class="string">"verticalGroupBox_2"</span>)</span><br><span class="line">        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalGroupBox_2)</span><br><span class="line">        self.verticalLayout_2.setContentsMargins(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        self.verticalLayout_2.setObjectName(<span class="string">"verticalLayout_2"</span>)</span><br><span class="line">        self.s3__send_text = QtWidgets.QTextEdit(self.verticalGroupBox_2)</span><br><span class="line">        self.s3__send_text.setObjectName(<span class="string">"s3__send_text"</span>)</span><br><span class="line">        self.verticalLayout_2.addWidget(self.s3__send_text)</span><br><span class="line">        self.s3__send_button = QtWidgets.QPushButton(Form)</span><br><span class="line">        self.s3__send_button.setGeometry(QtCore.QRect(<span class="number">620</span>, <span class="number">310</span>, <span class="number">61</span>, <span class="number">31</span>))</span><br><span class="line">        self.s3__send_button.setObjectName(<span class="string">"s3__send_button"</span>)</span><br><span class="line">        self.s3__clear_button = QtWidgets.QPushButton(Form)</span><br><span class="line">        self.s3__clear_button.setGeometry(QtCore.QRect(<span class="number">620</span>, <span class="number">350</span>, <span class="number">61</span>, <span class="number">31</span>))</span><br><span class="line">        self.s3__clear_button.setObjectName(<span class="string">"s3__clear_button"</span>)</span><br><span class="line">        self.formGroupBox1 = QtWidgets.QGroupBox(Form)</span><br><span class="line">        self.formGroupBox1.setGeometry(QtCore.QRect(<span class="number">20</span>, <span class="number">340</span>, <span class="number">171</span>, <span class="number">101</span>))</span><br><span class="line">        self.formGroupBox1.setObjectName(<span class="string">"formGroupBox1"</span>)</span><br><span class="line">        self.formLayout_2 = QtWidgets.QFormLayout(self.formGroupBox1)</span><br><span class="line">        self.formLayout_2.setContentsMargins(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        self.formLayout_2.setSpacing(<span class="number">10</span>)</span><br><span class="line">        self.formLayout_2.setObjectName(<span class="string">"formLayout_2"</span>)</span><br><span class="line">        self.label = QtWidgets.QLabel(self.formGroupBox1)</span><br><span class="line">        self.label.setObjectName(<span class="string">"label"</span>)</span><br><span class="line">        self.formLayout_2.setWidget(<span class="number">0</span>, QtWidgets.QFormLayout.LabelRole, self.label)</span><br><span class="line">        self.label_2 = QtWidgets.QLabel(self.formGroupBox1)</span><br><span class="line">        self.label_2.setObjectName(<span class="string">"label_2"</span>)</span><br><span class="line">        self.formLayout_2.setWidget(<span class="number">1</span>, QtWidgets.QFormLayout.LabelRole, self.label_2)</span><br><span class="line">        self.lineEdit = QtWidgets.QLineEdit(self.formGroupBox1)</span><br><span class="line">        self.lineEdit.setObjectName(<span class="string">"lineEdit"</span>)</span><br><span class="line">        self.formLayout_2.setWidget(<span class="number">0</span>, QtWidgets.QFormLayout.FieldRole, self.lineEdit)</span><br><span class="line">        self.lineEdit_2 = QtWidgets.QLineEdit(self.formGroupBox1)</span><br><span class="line">        self.lineEdit_2.setObjectName(<span class="string">"lineEdit_2"</span>)</span><br><span class="line">        self.formLayout_2.setWidget(<span class="number">1</span>, QtWidgets.QFormLayout.FieldRole, self.lineEdit_2)</span><br><span class="line">        self.hex_send = QtWidgets.QCheckBox(Form)</span><br><span class="line">        self.hex_send.setGeometry(QtCore.QRect(<span class="number">620</span>, <span class="number">280</span>, <span class="number">71</span>, <span class="number">16</span>))</span><br><span class="line">        self.hex_send.setObjectName(<span class="string">"hex_send"</span>)</span><br><span class="line">        self.hex_receive = QtWidgets.QCheckBox(Form)</span><br><span class="line">        self.hex_receive.setGeometry(QtCore.QRect(<span class="number">620</span>, <span class="number">40</span>, <span class="number">71</span>, <span class="number">16</span>))</span><br><span class="line">        self.hex_receive.setObjectName(<span class="string">"hex_receive"</span>)</span><br><span class="line">        self.s2__clear_button = QtWidgets.QPushButton(Form)</span><br><span class="line">        self.s2__clear_button.setGeometry(QtCore.QRect(<span class="number">620</span>, <span class="number">80</span>, <span class="number">61</span>, <span class="number">31</span>))</span><br><span class="line">        self.s2__clear_button.setObjectName(<span class="string">"s2__clear_button"</span>)</span><br><span class="line">        self.timer_send_cb = QtWidgets.QCheckBox(Form)</span><br><span class="line">        self.timer_send_cb.setGeometry(QtCore.QRect(<span class="number">260</span>, <span class="number">390</span>, <span class="number">71</span>, <span class="number">16</span>))</span><br><span class="line">        self.timer_send_cb.setObjectName(<span class="string">"timer_send_cb"</span>)</span><br><span class="line">        self.lineEdit_3 = QtWidgets.QLineEdit(Form)</span><br><span class="line">        self.lineEdit_3.setGeometry(QtCore.QRect(<span class="number">350</span>, <span class="number">390</span>, <span class="number">61</span>, <span class="number">20</span>))</span><br><span class="line">        self.lineEdit_3.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)</span><br><span class="line">        self.lineEdit_3.setObjectName(<span class="string">"lineEdit_3"</span>)</span><br><span class="line">        self.dw = QtWidgets.QLabel(Form)</span><br><span class="line">        self.dw.setGeometry(QtCore.QRect(<span class="number">420</span>, <span class="number">390</span>, <span class="number">54</span>, <span class="number">20</span>))</span><br><span class="line">        self.dw.setObjectName(<span class="string">"dw"</span>)</span><br><span class="line">        self.line = QtWidgets.QFrame(Form)</span><br><span class="line">        self.line.setGeometry(QtCore.QRect(<span class="number">700</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">351</span>))</span><br><span class="line">        self.line.setFrameShape(QtWidgets.QFrame.VLine)</span><br><span class="line">        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)</span><br><span class="line">        self.line.setObjectName(<span class="string">"line"</span>)</span><br><span class="line">        self.s4__open1_button = QtWidgets.QPushButton(Form)</span><br><span class="line">        self.s4__open1_button.setGeometry(QtCore.QRect(<span class="number">740</span>, <span class="number">160</span>, <span class="number">61</span>, <span class="number">31</span>))</span><br><span class="line">        self.s4__open1_button.setObjectName(<span class="string">"s4__open1_button"</span>)</span><br><span class="line">        self.s4__open2_button = QtWidgets.QPushButton(Form)</span><br><span class="line">        self.s4__open2_button.setGeometry(QtCore.QRect(<span class="number">740</span>, <span class="number">210</span>, <span class="number">61</span>, <span class="number">31</span>))</span><br><span class="line">        self.s4__open2_button.setObjectName(<span class="string">"s4__open2_button"</span>)</span><br><span class="line">        self.verticalGroupBox.raise_()</span><br><span class="line">        self.verticalGroupBox_2.raise_()</span><br><span class="line">        self.formGroupBox.raise_()</span><br><span class="line">        self.s3__send_button.raise_()</span><br><span class="line">        self.s3__clear_button.raise_()</span><br><span class="line">        self.formGroupBox.raise_()</span><br><span class="line">        self.hex_send.raise_()</span><br><span class="line">        self.hex_receive.raise_()</span><br><span class="line">        self.s2__clear_button.raise_()</span><br><span class="line">        self.timer_send_cb.raise_()</span><br><span class="line">        self.lineEdit_3.raise_()</span><br><span class="line">        self.dw.raise_()</span><br><span class="line">        self.line.raise_()</span><br><span class="line">        self.s4__open1_button.raise_()</span><br><span class="line">        self.s4__open2_button.raise_()</span><br><span class="line"></span><br><span class="line">        self.retranslateUi(Form)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(Form)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">retranslateUi</span><span class="params">(self, Form)</span>:</span></span><br><span class="line">        _translate = QtCore.QCoreApplication.translate</span><br><span class="line">        Form.setWindowTitle(_translate(<span class="string">"Form"</span>, <span class="string">"Form"</span>))</span><br><span class="line">        self.formGroupBox.setTitle(_translate(<span class="string">"Form"</span>, <span class="string">"串口设置"</span>))</span><br><span class="line">        self.s1__lb_1.setText(_translate(<span class="string">"Form"</span>, <span class="string">"串口检测："</span>))</span><br><span class="line">        self.s1__box_1.setText(_translate(<span class="string">"Form"</span>, <span class="string">"检测串口"</span>))</span><br><span class="line">        self.s1__lb_2.setText(_translate(<span class="string">"Form"</span>, <span class="string">"串口选择："</span>))</span><br><span class="line">        self.s1__lb_3.setText(_translate(<span class="string">"Form"</span>, <span class="string">"波特率："</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">0</span>, _translate(<span class="string">"Form"</span>, <span class="string">"115200"</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">1</span>, _translate(<span class="string">"Form"</span>, <span class="string">"2400"</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">2</span>, _translate(<span class="string">"Form"</span>, <span class="string">"4800"</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">3</span>, _translate(<span class="string">"Form"</span>, <span class="string">"9600"</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">4</span>, _translate(<span class="string">"Form"</span>, <span class="string">"14400"</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">5</span>, _translate(<span class="string">"Form"</span>, <span class="string">"19200"</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">6</span>, _translate(<span class="string">"Form"</span>, <span class="string">"38400"</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">7</span>, _translate(<span class="string">"Form"</span>, <span class="string">"57600"</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">8</span>, _translate(<span class="string">"Form"</span>, <span class="string">"76800"</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">9</span>, _translate(<span class="string">"Form"</span>, <span class="string">"12800"</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">10</span>, _translate(<span class="string">"Form"</span>, <span class="string">"230400"</span>))</span><br><span class="line">        self.s1__box_3.setItemText(<span class="number">11</span>, _translate(<span class="string">"Form"</span>, <span class="string">"460800"</span>))</span><br><span class="line">        self.s1__lb_4.setText(_translate(<span class="string">"Form"</span>, <span class="string">"数据位："</span>))</span><br><span class="line">        self.s1__box_4.setItemText(<span class="number">0</span>, _translate(<span class="string">"Form"</span>, <span class="string">"8"</span>))</span><br><span class="line">        self.s1__box_4.setItemText(<span class="number">1</span>, _translate(<span class="string">"Form"</span>, <span class="string">"7"</span>))</span><br><span class="line">        self.s1__box_4.setItemText(<span class="number">2</span>, _translate(<span class="string">"Form"</span>, <span class="string">"6"</span>))</span><br><span class="line">        self.s1__box_4.setItemText(<span class="number">3</span>, _translate(<span class="string">"Form"</span>, <span class="string">"5"</span>))</span><br><span class="line">        self.s1__lb_5.setText(_translate(<span class="string">"Form"</span>, <span class="string">"校验位："</span>))</span><br><span class="line">        self.s1__box_5.setItemText(<span class="number">0</span>, _translate(<span class="string">"Form"</span>, <span class="string">"N"</span>))</span><br><span class="line">        self.open_button.setText(_translate(<span class="string">"Form"</span>, <span class="string">"打开串口"</span>))</span><br><span class="line">        self.close_button.setText(_translate(<span class="string">"Form"</span>, <span class="string">"关闭串口"</span>))</span><br><span class="line">        self.s1__lb_6.setText(_translate(<span class="string">"Form"</span>, <span class="string">"停止位："</span>))</span><br><span class="line">        self.s1__box_6.setItemText(<span class="number">0</span>, _translate(<span class="string">"Form"</span>, <span class="string">"1"</span>))</span><br><span class="line">        self.verticalGroupBox.setTitle(_translate(<span class="string">"Form"</span>, <span class="string">"接受区"</span>))</span><br><span class="line">        self.verticalGroupBox_2.setTitle(_translate(<span class="string">"Form"</span>, <span class="string">"发送区"</span>))</span><br><span class="line">        self.s3__send_text.setHtml(_translate(<span class="string">"Form"</span>, <span class="string">"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\"&gt;\n"</span></span><br><span class="line"><span class="string">"&lt;html&gt;&lt;head&gt;&lt;meta name=\"qrichtext\" content=\"1\" /&gt;&lt;style type=\"text/css\"&gt;\n"</span></span><br><span class="line"><span class="string">"p, li &#123; white-space: pre-wrap; &#125;\n"</span></span><br><span class="line"><span class="string">"&lt;/style&gt;&lt;/head&gt;&lt;body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\"&gt;\n"</span></span><br><span class="line"><span class="string">"&lt;p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"&gt;123456&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;"</span>))</span><br><span class="line">        self.s3__send_button.setText(_translate(<span class="string">"Form"</span>, <span class="string">"发送"</span>))</span><br><span class="line">        self.s3__clear_button.setText(_translate(<span class="string">"Form"</span>, <span class="string">"清除"</span>))</span><br><span class="line">        self.formGroupBox1.setTitle(_translate(<span class="string">"Form"</span>, <span class="string">"串口状态"</span>))</span><br><span class="line">        self.label.setText(_translate(<span class="string">"Form"</span>, <span class="string">"已接收："</span>))</span><br><span class="line">        self.label_2.setText(_translate(<span class="string">"Form"</span>, <span class="string">"已发送："</span>))</span><br><span class="line">        self.hex_send.setText(_translate(<span class="string">"Form"</span>, <span class="string">"Hex发送"</span>))</span><br><span class="line">        self.hex_receive.setText(_translate(<span class="string">"Form"</span>, <span class="string">"Hex接收"</span>))</span><br><span class="line">        self.s2__clear_button.setText(_translate(<span class="string">"Form"</span>, <span class="string">"清除"</span>))</span><br><span class="line">        self.timer_send_cb.setText(_translate(<span class="string">"Form"</span>, <span class="string">"定时发送"</span>))</span><br><span class="line">        self.lineEdit_3.setText(_translate(<span class="string">"Form"</span>, <span class="string">"1000"</span>))</span><br><span class="line">        self.dw.setText(_translate(<span class="string">"Form"</span>, <span class="string">"ms/次"</span>))</span><br><span class="line">        self.s4__open1_button.setText(_translate(<span class="string">"Form"</span>, <span class="string">"打开1灯"</span>))</span><br><span class="line">        self.s4__open2_button.setText(_translate(<span class="string">"Form"</span>, <span class="string">"打开2灯"</span>))</span><br></pre></td></tr></table></figure><blockquote><p>ui_demo.py</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">import</span> serial.tools.list_ports</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QMessageBox</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QTimer</span><br><span class="line"><span class="keyword">from</span> ui_demo_1 <span class="keyword">import</span> Ui_Form</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pyqt5_Serial</span><span class="params">(QtWidgets.QWidget, Ui_Form)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Pyqt5_Serial, self).__init__()</span><br><span class="line">        self.setupUi(self)</span><br><span class="line">        self.init()</span><br><span class="line">        self.setWindowTitle(<span class="string">"串口小助手"</span>)</span><br><span class="line">        self.ser = serial.Serial()</span><br><span class="line">        self.port_check()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 接收数据和发送数据数目置零</span></span><br><span class="line">        self.data_num_received = <span class="number">0</span></span><br><span class="line">        self.lineEdit.setText(str(self.data_num_received))</span><br><span class="line">        self.data_num_sended = <span class="number">0</span></span><br><span class="line">        self.lineEdit_2.setText(str(self.data_num_sended))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 串口检测按钮</span></span><br><span class="line">        self.s1__box_1.clicked.connect(self.port_check)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 串口信息显示</span></span><br><span class="line">        self.s1__box_2.currentTextChanged.connect(self.port_imf)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开串口按钮</span></span><br><span class="line">        self.open_button.clicked.connect(self.port_open)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 关闭串口按钮</span></span><br><span class="line">        self.close_button.clicked.connect(self.port_close)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送数据按钮</span></span><br><span class="line">        self.s3__send_button.clicked.connect(self.data_send)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定时发送数据</span></span><br><span class="line">        self.timer_send = QTimer()</span><br><span class="line">        self.timer_send.timeout.connect(self.data_send)</span><br><span class="line">        self.timer_send_cb.stateChanged.connect(self.data_send_timer)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定时器接收数据</span></span><br><span class="line">        self.timer = QTimer(self)</span><br><span class="line">        self.timer.timeout.connect(self.data_receive)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清除发送窗口</span></span><br><span class="line">        self.s3__clear_button.clicked.connect(self.send_data_clear)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 清除接收窗口</span></span><br><span class="line">        self.s2__clear_button.clicked.connect(self.receive_data_clear)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开1灯</span></span><br><span class="line">        self.s4__open1_button.clicked.connect(self.open_led1)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开2灯</span></span><br><span class="line">        self.s4__open2_button.clicked.connect(self.open_led2)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 串口检测</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">port_check</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 检测所有存在的串口，将信息存储在字典中</span></span><br><span class="line">        self.Com_Dict = &#123;&#125;</span><br><span class="line">        port_list = list(serial.tools.list_ports.comports())</span><br><span class="line">        self.s1__box_2.clear()</span><br><span class="line">        <span class="keyword">for</span> port <span class="keyword">in</span> port_list:</span><br><span class="line">            self.Com_Dict[<span class="string">"%s"</span> % port[<span class="number">0</span>]] = <span class="string">"%s"</span> % port[<span class="number">1</span>]</span><br><span class="line">            self.s1__box_2.addItem(port[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> len(self.Com_Dict) == <span class="number">0</span>:</span><br><span class="line">            self.state_label.setText(<span class="string">" 无串口"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 串口信息</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">port_imf</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 显示选定的串口的详细信息</span></span><br><span class="line">        imf_s = self.s1__box_2.currentText()</span><br><span class="line">        <span class="keyword">if</span> imf_s != <span class="string">""</span>:</span><br><span class="line">            self.state_label.setText(self.Com_Dict[self.s1__box_2.currentText()])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打开串口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">port_open</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.ser.port = self.s1__box_2.currentText()</span><br><span class="line">        self.ser.baudrate = int(self.s1__box_3.currentText())</span><br><span class="line">        self.ser.bytesize = int(self.s1__box_4.currentText())</span><br><span class="line">        self.ser.stopbits = int(self.s1__box_6.currentText())</span><br><span class="line">        self.ser.parity = self.s1__box_5.currentText()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ser.open()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            QMessageBox.critical(self, <span class="string">"Port Error"</span>, <span class="string">"此串口不能被打开！"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打开串口接收定时器，周期为2ms</span></span><br><span class="line">        self.timer.start(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.ser.isOpen():</span><br><span class="line">            self.open_button.setEnabled(<span class="literal">False</span>)</span><br><span class="line">            self.close_button.setEnabled(<span class="literal">True</span>)</span><br><span class="line">            self.formGroupBox1.setTitle(<span class="string">"串口状态（已开启）"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 关闭串口</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">port_close</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.timer.stop()</span><br><span class="line">        self.timer_send.stop()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.ser.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        self.open_button.setEnabled(<span class="literal">True</span>)</span><br><span class="line">        self.close_button.setEnabled(<span class="literal">False</span>)</span><br><span class="line">        self.lineEdit_3.setEnabled(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 接收数据和发送数据数目置零</span></span><br><span class="line">        self.data_num_received = <span class="number">0</span></span><br><span class="line">        self.lineEdit.setText(str(self.data_num_received))</span><br><span class="line">        self.data_num_sended = <span class="number">0</span></span><br><span class="line">        self.lineEdit_2.setText(str(self.data_num_sended))</span><br><span class="line">        self.formGroupBox1.setTitle(<span class="string">"串口状态（已关闭）"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 发送数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data_send</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.ser.isOpen():</span><br><span class="line">            input_s = self.s3__send_text.toPlainText()</span><br><span class="line">            <span class="keyword">if</span> input_s != <span class="string">""</span>:</span><br><span class="line">                <span class="comment"># 非空字符串</span></span><br><span class="line">                <span class="keyword">if</span> self.hex_send.isChecked():</span><br><span class="line">                    <span class="comment"># hex发送</span></span><br><span class="line">                    input_s = input_s.strip()</span><br><span class="line">                    send_list = []</span><br><span class="line">                    <span class="keyword">while</span> input_s != <span class="string">''</span>:</span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            num = int(input_s[<span class="number">0</span>:<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">                        <span class="keyword">except</span> ValueError:</span><br><span class="line">                            QMessageBox.critical(self, <span class="string">'wrong data'</span>, <span class="string">'请输入十六进制数据，以空格分开!'</span>)</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">                        input_s = input_s[<span class="number">2</span>:].strip()</span><br><span class="line">                        send_list.append(num)</span><br><span class="line">                    input_s = bytes(send_list)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># ascii发送</span></span><br><span class="line">                    input_s = (input_s + <span class="string">'\r\n'</span>).encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">                num = self.ser.write(input_s)</span><br><span class="line">                self.data_num_sended += num</span><br><span class="line">                self.lineEdit_2.setText(str(self.data_num_sended))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 接收数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data_receive</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            num = self.ser.inWaiting()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.port_close()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> num &gt; <span class="number">0</span>:</span><br><span class="line">            data = self.ser.read(num)</span><br><span class="line">            num = len(data)</span><br><span class="line">            <span class="comment"># hex显示</span></span><br><span class="line">            <span class="keyword">if</span> self.hex_receive.checkState():</span><br><span class="line">                out_s = <span class="string">''</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data)):</span><br><span class="line">                    out_s = out_s + <span class="string">'&#123;:02X&#125;'</span>.format(data[i]) + <span class="string">' '</span></span><br><span class="line">                self.s2__receive_text.insertPlainText(out_s)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 串口接收到的字符串为b'123',要转化成unicode字符串才能输出到窗口中去</span></span><br><span class="line">                self.s2__receive_text.insertPlainText(data.decode(<span class="string">'iso-8859-1'</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 统计接收字符的数量</span></span><br><span class="line">            self.data_num_received += num</span><br><span class="line">            self.lineEdit.setText(str(self.data_num_received))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 获取到text光标</span></span><br><span class="line">            textCursor = self.s2__receive_text.textCursor()</span><br><span class="line">            <span class="comment"># 滚动到底部</span></span><br><span class="line">            textCursor.movePosition(textCursor.End)</span><br><span class="line">            <span class="comment"># 设置光标到text中去</span></span><br><span class="line">            self.s2__receive_text.setTextCursor(textCursor)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 定时发送数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">data_send_timer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.timer_send_cb.isChecked():</span><br><span class="line">            self.timer_send.start(int(self.lineEdit_3.text()))</span><br><span class="line">            self.lineEdit_3.setEnabled(<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.timer_send.stop()</span><br><span class="line">            self.lineEdit_3.setEnabled(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 清除显示</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_data_clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.s3__send_text.setText(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">receive_data_clear</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.s2__receive_text.setText(<span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_led1</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        input_s = <span class="string">'1'</span></span><br><span class="line">        input_s = input_s.strip()</span><br><span class="line">        send_list = []</span><br><span class="line">        <span class="keyword">while</span> input_s != <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                num = int(input_s[<span class="number">0</span>:<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                QMessageBox.critical(self, <span class="string">'wrong data'</span>, <span class="string">'请输入十六进制数据，以空格分开!'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            input_s = input_s[<span class="number">2</span>:].strip()</span><br><span class="line">            send_list.append(num)</span><br><span class="line">        input_s = bytes(send_list)</span><br><span class="line"></span><br><span class="line">        num = self.ser.write(input_s)</span><br><span class="line">        self.data_num_sended += num</span><br><span class="line">        self.lineEdit_2.setText(str(self.data_num_sended))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_led2</span><span class="params">(self)</span>:</span></span><br><span class="line"></span><br><span class="line">        input_s = <span class="string">'2'</span></span><br><span class="line">        input_s = input_s.strip()</span><br><span class="line">        send_list = []</span><br><span class="line">        <span class="keyword">while</span> input_s != <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                num = int(input_s[<span class="number">0</span>:<span class="number">2</span>], <span class="number">16</span>)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                QMessageBox.critical(self, <span class="string">'wrong data'</span>, <span class="string">'请输入十六进制数据，以空格分开!'</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            input_s = input_s[<span class="number">2</span>:].strip()</span><br><span class="line">            send_list.append(num)</span><br><span class="line">        input_s = bytes(send_list)</span><br><span class="line"></span><br><span class="line">        num = self.ser.write(input_s)</span><br><span class="line">        self.data_num_sended += num</span><br><span class="line">        self.lineEdit_2.setText(str(self.data_num_sended))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    myshow = Pyqt5_Serial()</span><br><span class="line">    myshow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><blockquote><p>CCS源代码</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DSP2833x_Device.h"</span>     <span class="comment">// DSP2833x 头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"DSP2833x_Examples.h"</span>   <span class="comment">// DSP2833x 例子相关头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************函数声明************************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scib_echoback_init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scib_xmit</span><span class="params">(<span class="keyword">int</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scib_msg</span><span class="params">(<span class="keyword">char</span> *msg)</span></span>;</span><br><span class="line"><span class="comment">/**********************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用前，声明本文件中的相关函数；</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">configtestled</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************宏定义************************************************/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitDIR()                                          \</span></span><br><span class="line">                     EALLOW;                               \</span><br><span class="line">                     GpioCtrlRegs.GPBPUD.bit.GPIO49 = <span class="number">0</span>;   \</span><br><span class="line">                     GpioCtrlRegs.GPBDIR.bit.GPIO49 = <span class="number">1</span>;   \</span><br><span class="line">                     GpioDataRegs.GPBCLEAR.bit.GPIO49 = <span class="number">1</span>; \</span><br><span class="line">                     EDIS;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RX_EN       GpioDataRegs.GPBCLEAR.bit.GPIO49 = 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TX_EN       GpioDataRegs.GPBSET.bit.GPIO49 = 1;</span></span><br><span class="line"><span class="comment">/**********************************************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Uint16 ReceivedChar;   <span class="comment">//变量定义</span></span><br><span class="line">    <span class="keyword">char</span> *msg;             <span class="comment">//指针</span></span><br><span class="line"><span class="comment">// 步骤 1. 初始化系统控制:</span></span><br><span class="line"><span class="comment">// 设置PLL, WatchDog, 使能外设时钟</span></span><br><span class="line"><span class="comment">// 下面这个函数可以从DSP2833x_SysCtrl.c文件中找到..</span></span><br><span class="line">   InitSysCtrl();</span><br><span class="line">   InitScibGpio();</span><br><span class="line"><span class="comment">// 步骤 2. 初始化通用输入输出多路复用器GPIO:</span></span><br><span class="line"><span class="comment">// 这个函数在DSP2833x_Gpio.c源文件中被定义了</span></span><br><span class="line"><span class="comment">// 这个函数使GPIO控制类寄存器初始化到默认状态</span></span><br><span class="line"><span class="comment">// InitGpio();  // 本例不用此子函数</span></span><br><span class="line">   InitDIR();</span><br><span class="line"><span class="comment">// 本例使用下面的GPIO配置</span></span><br><span class="line">   configtestled();</span><br><span class="line"><span class="comment">// 总线初始化函数</span></span><br><span class="line">   InitXintf16Gpio();<span class="comment">//zq</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤 3. 清除所有中断初始化中断向量表:</span></span><br><span class="line"><span class="comment">// 禁止CPU全局中断</span></span><br><span class="line">   DINT;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化PIE控制寄存器到他们的默认状态.</span></span><br><span class="line"><span class="comment">// 这个默认状态就是禁止PIE中断及清除所有PIE中断标志</span></span><br><span class="line"><span class="comment">// 这个函数放在DSP2833x_PieCtrl.c源文件里</span></span><br><span class="line">   InitPieCtrl();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止CPU中断和清除所有CPU中断标志</span></span><br><span class="line">   IER = <span class="number">0x0000</span>;</span><br><span class="line">   IFR = <span class="number">0x0000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化PIE中断向量表，并使其指向中断服务子程序（ISR）</span></span><br><span class="line"><span class="comment">// 这些中断服务子程序被放在了DSP280x_DefaultIsr.c源文件中</span></span><br><span class="line"><span class="comment">// 这个函数放在了DSP2833x_PieVect.c源文件里面.</span></span><br><span class="line">   InitPieVectTable();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 步骤 4. 初始化片内外设:</span></span><br><span class="line"><span class="comment">// 这个函数可以在DSP280x_CpuTimers.c源文件中找到</span></span><br><span class="line"><span class="comment">//   InitCpuTimers();   // 这个例子仅初始化了Cpu定时器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 步骤 5. 用户特定的代码</span></span><br><span class="line">   scib_echoback_init();</span><br><span class="line"></span><br><span class="line">   msg = <span class="string">"\r\n\nled control\0"</span>;  <span class="comment">//发送语句</span></span><br><span class="line">   scib_msg(msg);                    <span class="comment">//发送函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   msg = <span class="string">"\r\n \n\0"</span>;  <span class="comment">//发送语句</span></span><br><span class="line">   scib_msg(msg);                    <span class="comment">//发送函数</span></span><br><span class="line"></span><br><span class="line">  GpioDataRegs.GPASET.bit.GPIO1 = <span class="number">1</span>;</span><br><span class="line">  GpioDataRegs.GPASET.bit.GPIO2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">   &#123;</span><br><span class="line">      msg = <span class="string">"\r\n \0"</span>;  <span class="comment">//发送语句</span></span><br><span class="line">      scib_msg(msg);                      <span class="comment">//发送函数</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//等待接收到数据，否则在此循环</span></span><br><span class="line">      <span class="keyword">while</span>(ScibRegs.SCIRXST.bit.RXRDY !=<span class="number">1</span>) &#123; &#125; <span class="comment">// wait for XRDY =1 for empty state</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//把接收BUF里的数据赋值给ReceivedChar</span></span><br><span class="line">      ReceivedChar = ScibRegs.SCIRXBUF.all;</span><br><span class="line">      msg = <span class="string">"  led open \0"</span>;           <span class="comment">//发送语句</span></span><br><span class="line">      scib_msg(msg);                    <span class="comment">//发送函数</span></span><br><span class="line">      scib_xmit(ReceivedChar);          <span class="comment">//发送ReceivedChar</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(ScibRegs.SCIRXBUF.all == <span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line"></span><br><span class="line">      GpioDataRegs.GPACLEAR.bit.GPIO1 = <span class="number">1</span>;</span><br><span class="line">      GpioDataRegs.GPASET.bit.GPIO2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      msg = <span class="string">"1"</span>;</span><br><span class="line">      scib_msg(msg);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (ScibRegs.SCIRXBUF.all == <span class="number">2</span>)</span><br><span class="line">      &#123;</span><br><span class="line">    GpioDataRegs.GPACLEAR.bit.GPIO2 = <span class="number">1</span>;</span><br><span class="line">        GpioDataRegs.GPASET.bit.GPIO1 = <span class="number">1</span>;</span><br><span class="line">      msg = <span class="string">"2"</span>;</span><br><span class="line">      scib_msg(msg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">configtestled</span><span class="params">(<span class="keyword">void</span>)</span>  <span class="comment">//GPIO初始化函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   EALLOW;</span><br><span class="line">   GpioCtrlRegs.GPAMUX1.bit.GPIO1 = <span class="number">0</span>; <span class="comment">// GPIO0复用为GPIO功能</span></span><br><span class="line">   GpioCtrlRegs.GPADIR.bit.GPIO1 = <span class="number">1</span>;  <span class="comment">// GPIO0设置为输出</span></span><br><span class="line">   GpioCtrlRegs.GPAMUX1.bit.GPIO2 = <span class="number">0</span>; <span class="comment">// GPIO1复用为GPIO功能</span></span><br><span class="line">   GpioCtrlRegs.GPADIR.bit.GPIO2 = <span class="number">1</span>;  <span class="comment">// GPIO1设置为输出</span></span><br><span class="line"></span><br><span class="line">   EDIS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scib_echoback_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// Note: Clocks were turned on to the SCIA peripheral</span></span><br><span class="line">    <span class="comment">// in the InitSysCtrl() function</span></span><br><span class="line"><span class="comment">//SCI的工作模式和参数需要用户在后面的学习中，深入的了解一个寄存器底层相关的资料了，多看看芯片手册和寄存器的意思。</span></span><br><span class="line">    <span class="comment">//因为28335的寄存器太多了，所以在以后的学习过程中，就不会对寄存器进行详细的注释了。</span></span><br><span class="line">    ScibRegs.SCICTL1.bit.SWRESET =<span class="number">0</span>;</span><br><span class="line"> ScibRegs.SCICCR.all =<span class="number">0x0007</span>;   <span class="comment">// 1 stop bit,  No loopback</span></span><br><span class="line">                                   <span class="comment">// No parity,8 char bits,</span></span><br><span class="line">                                   <span class="comment">// async mode, idle-line protocol</span></span><br><span class="line">ScibRegs.SCICTL1.all =<span class="number">0x0003</span>;  <span class="comment">// enable TX, RX, internal SCICLK,</span></span><br><span class="line">                                   <span class="comment">// Disable RX ERR, SLEEP, TXWAKE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (CPU_FRQ_150MHZ)</span></span><br><span class="line">      ScibRegs.SCIHBAUD    =<span class="number">0x0001</span>;  <span class="comment">// 9600 baud @LSPCLK = 37.5MHz.</span></span><br><span class="line">      ScibRegs.SCILBAUD    =<span class="number">0x00E7</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (CPU_FRQ_100MHZ)</span></span><br><span class="line">          ScibRegs.SCIHBAUD    =<span class="number">0x0001</span>;  <span class="comment">// 9600 baud @LSPCLK = 20MHz.</span></span><br><span class="line">          ScibRegs.SCILBAUD    =<span class="number">0x0044</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">ScibRegs.SCICTL1.all =<span class="number">0x0023</span>;  <span class="comment">// Relinquish SCI from Reset</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Transmit a character from the SCI</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scib_xmit</span><span class="params">(<span class="keyword">int</span> a)</span>              <span class="comment">//发送字节的函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (ScibRegs.SCICTL2.bit.TXRDY == <span class="number">0</span>) &#123;&#125;</span><br><span class="line">    ScibRegs.SCITXBUF=a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scib_msg</span><span class="params">(<span class="keyword">char</span> * msg)</span>          <span class="comment">//发送数组的函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">TX_EN;</span><br><span class="line">    <span class="keyword">while</span>(msg[i] != <span class="string">'\0'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        scib_xmit(msg[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">RX_EN;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"><span class="comment">// No more.</span></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>[1] <a href="https://github.com/ColinFred/Pyserial-Demo" target="_blank" rel="noopener">参考的串口程序</a></p><p>[2] 王硕,孙洋洋.PyQt5快速开发与实战[M].电子工业出版社:北京,2017</p>]]></content>
      
      
      
        <tags>
            
            <tag> 上位机 </tag>
            
            <tag> DSP开发板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSP基础知识一览</title>
      <link href="/2019/08/10/DSP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%80%E8%A7%88/"/>
      <url>/2019/08/10/DSP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E4%B8%80%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<h2 id="CCS编程基础"><a href="#CCS编程基础" class="headerlink" title="CCS编程基础"></a>CCS编程基础</h2><p>CCS开发环境已经为我们封装好了许多片内外设寄存器的结构体，我们只需要包含相应的官方的头文件就可以使用了，那么它的内部具体是如何实现的呢？</p><p>下面来一个典型的例子：</p><h3 id="1-使用结构体和联合体"><a href="#1-使用结构体和联合体" class="headerlink" title="1.使用结构体和联合体"></a>1.使用结构体和联合体</h3><p><strong>A.用struct定义位域的作用：在DSP2833x_Sci.h中有一段:</strong> </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">SCICCR_BITS</span> &#123;</span>        <span class="comment">// bit    description</span></span><br><span class="line">   Uint16 SCICHAR:<span class="number">3</span>;         <span class="comment">// 2:0    Character length control</span></span><br><span class="line">   Uint16 ADDRIDLE_MODE:<span class="number">1</span>;   <span class="comment">// 3      ADDR/IDLE Mode control</span></span><br><span class="line">   Uint16 LOOPBKENA:<span class="number">1</span>;       <span class="comment">// 4      Loop Back enable</span></span><br><span class="line">   Uint16 PARITYENA:<span class="number">1</span>;       <span class="comment">// 5      Parity enable</span></span><br><span class="line">   Uint16 PARITY:<span class="number">1</span>;          <span class="comment">// 6      Even or Odd Parity</span></span><br><span class="line">   Uint16 STOPBITS:<span class="number">1</span>;        <span class="comment">// 7      Number of Stop Bits</span></span><br><span class="line">   Uint16 rsvd1:<span class="number">8</span>;           <span class="comment">// 15:8   reserved 保留</span></span><br><span class="line">&#125;; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">union</span> SCICCR_REG &#123;</span><br><span class="line">   Uint16              all;</span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">SCICCR_BITS</span>  <span class="title">bit</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Uint16 SCICHAR:3 表示定义SCICHAR，它占一个字节中的3位；<strong>*注意：必须以4字节对齐！观察上面的SCICCR_BITS的定义也会发现前面定义了3+1+1+1+1+1=8位=1字节</strong></p><p><strong>B.再来看union的作用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> SCICCR_REG&#123;</span><br><span class="line">      Uint16     all;</span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">SCICCR_BITS</span> <span class="title">bit</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样定义有什么效果？<br>当我想操作SCICCR_BITS中的每一位时，只需定义union SCICCR_REG reg即可</p><p>我们可以整体操作，如：reg.all = 0x0011;</p><p>我们可以操作其中一位：reg.bit.PARITY = 0;</p><p>还记得c语言中union中的共享同一个内存空间地址么？</p><h3 id="2-使用cmd文件进行数据段与存储器空间映射"><a href="#2-使用cmd文件进行数据段与存储器空间映射" class="headerlink" title="2.使用cmd文件进行数据段与存储器空间映射"></a>2.使用cmd文件进行数据段与存储器空间映射</h3><p>既然官方已经帮我们做好了上面的一切，上面的东西肯定可以直接使用，那么为什么可以直接使用呢？</p><p>定义一个上面的变量就可以访问到真正硬件上的寄存器了吗？肯定不行！</p><p>我们需要将上面的变量和实际硬件的寄存器存储空间绑定，怎么绑定，通过cmd文件。</p><p>下面是官方DSP2833x_GlobalVariableDefs.c中的一段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//----------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> DATA_SECTION(<span class="meta-string">"ScicRegsFile"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> DATA_SECTION(ScicRegs,<span class="meta-string">"ScicRegsFile"</span>);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">volatile</span> <span class="class"><span class="keyword">struct</span> <span class="title">SCI_REGS</span> <span class="title">ScicRegs</span>;</span></span><br></pre></td></tr></table></figure><p>官方定义了ScicRegs来操作串口SCI-C的相关的寄存器，但是肯定没法直接使用，还没有做绑定；</p><p>使用#pragma DATA_SECTION可以将变量与数据段绑定，变量和数据段是自己定义的，只需要将他们绑定即可；</p><p>这样绑定显然还不行，还需要通过cmd文件数据段映射到硬件的寄存器地址空间中去！</p><p>查看DSP2833x_Headers_nonBIOS.cmd文件我们发现其中有这样几行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MEMORY</span><br><span class="line">&#123;</span><br><span class="line"> PAGE <span class="number">0</span>:    <span class="comment">/* Program Memory */</span></span><br><span class="line"> </span><br><span class="line"> PAGE <span class="number">1</span>:    <span class="comment">/* Data Memory */</span> </span><br><span class="line">   </span><br><span class="line">   ADC         : origin = <span class="number">0x007100</span>, length = <span class="number">0x000020</span>     <span class="comment">/* ADC registers */</span></span><br><span class="line">   SCIB        : origin = <span class="number">0x007750</span>, length = <span class="number">0x000010</span>     <span class="comment">/* SCI-B registers */</span></span><br><span class="line">   SCIC        : origin = <span class="number">0x007770</span>, length = <span class="number">0x000010</span>     <span class="comment">/* SCI-C registers */</span>   </span><br><span class="line">   I2CA        : origin = <span class="number">0x007900</span>, length = <span class="number">0x000040</span>     <span class="comment">/* I2C-A registers */</span> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">SECTIONS</span><br><span class="line">&#123;</span><br><span class="line">   AdcRegsFile       : &gt; ADC,         PAGE = <span class="number">1</span></span><br><span class="line">   ScibRegsFile      : &gt; SCIB,        PAGE = <span class="number">1</span></span><br><span class="line">   ScicRegsFile      : &gt; SCIC,        PAGE = <span class="number">1</span></span><br><span class="line">   I2caRegsFile      : &gt; I2CA,        PAGE = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MEMORY代表内存空间，PAGE0是程序空间， PAGE1是数据空间；</p><p>(还记得第一课的介绍么？28335采样的哈佛总线结构，程序与数据分开了~)</p><p>SECTIONS代表需要映射的段；</p><p>通过上面的映射后，操作ScicRegs就可以实际操作串口了，目的也就达到了；</p><hr><h2 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h2><p>TMS320F28335上有一个基于PLL电路的片上时钟模块，如图1所示，为CPU及外设提供时钟有两种方式：</p><blockquote><p>一种是用外部的时钟源，将其连接到X1引脚上或者XCLKIN引脚上，X2接地；<br>另一种是使用振荡器产生时钟，用30MHz的晶体和两个20PF的电容组成的电路分别连接到X1和X2引脚上，XCLKIN引脚接地。</p></blockquote><p>我们常用第二种来产生时钟。此时钟将通过一个内部PLL锁相环电路，进行倍频。由于F28335的最大工作频率是150M，所以倍频值最大是5。其中倍频值由PLLCR的低四位和PLLSTS的第7、8位来决定。其详细的倍频值可以参照TMS320F28335的Datasheet。</p><p><img src="https://s2.ax1x.com/2019/08/10/eXpGTJ.png" alt="eXpGTJ.png"></p><p>三种时钟输入的接法:</p><p><img src="https://s2.ax1x.com/2019/08/10/eXpr0e.png" alt="eXpr0e.png"></p><p>如果我们希望DSP工作在某一个频率下，我们就可以对Uint16 val, Uint16 divsel两个参数进行设定。说白了就相当于乘10，除2 (30*10/2 = 150MHZ)</p><hr><h2 id="GPIO引脚"><a href="#GPIO引脚" class="headerlink" title="GPIO引脚"></a>GPIO引脚</h2><p><strong>GPIO（General-Purpose Input/Output）——通用输入/输出口</strong></p><p>DSP28335 GPIO模块分为三类IO口：PORTA(0-31),PORTB(32-63),PORTC(64-87) 对GPIO模块的设置主要通过三类寄存器来完成，分别是：控制寄存器、数据寄存器、中断寄存器。</p><p><strong>1、控制寄存器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  GPxCTRL;    <span class="comment">// GPIO x Control Register (GPIO0 to 31)</span></span><br><span class="line">              <span class="comment">//设置采样窗周期T=2*GPXCTRL*Tsysclk；</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  GPxQSEL1;   <span class="comment">// GPIO x Qualifier Select 1 Register (GPIO0 to 15)(32-47)            </span></span><br><span class="line">  GPxQSEL2;   <span class="comment">// GPIO x Qualifier Select 2 Register (GPIO16 to 31)(48-63)</span></span><br><span class="line">              <span class="comment">//每两位控制一个引脚，确定是3周期采样还是6周期采样或者不用采样</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  GPxMUX1;    <span class="comment">// GPIO x Mux 1 Register (GPIO0 to 15)(32-47)(64-79)</span></span><br><span class="line"></span><br><span class="line">  GPxMUX2;    <span class="comment">// GPIO x Mux 2 Register (GPIO16 to 31)(48-63)(80-95)</span></span><br><span class="line">              <span class="comment">//配置各个引脚的功能，0：I/O功能，1：外设功能。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  GPxDIR;     <span class="comment">// GPIO x Direction Register (GPIO0 to 31)(32-63)(64-95)</span></span><br><span class="line">              <span class="comment">//配置每个引脚是输入还是输出，0：数字量输入；1：数字量输出。</span></span><br><span class="line">  GPxPUD;     <span class="comment">// GPIO x Pull Up Disable Register (GPIO0 to 31)(32-63)(64-95)</span></span><br><span class="line">              <span class="comment">//使能或禁止内部上拉 0：开启上拉，1：禁止上拉</span></span><br></pre></td></tr></table></figure><p><strong>2、数据寄存器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  GPxDAT;     <span class="comment">// GPIO Data Register (GPIO0 to 31)(32-63)(64-95)</span></span><br><span class="line">  GPxSET;     <span class="comment">// GPIO Data Set Register (GPIO0 to 31)(32-63)(64-95)——置位</span></span><br><span class="line"></span><br><span class="line">  GPxCLEAR;   <span class="comment">// GPIO Data Clear Register (GPIO0 to 31)(32-63)(64-95)</span></span><br><span class="line"></span><br><span class="line">  GPxTOGGLE;  <span class="comment">// GPIO Data Toggle Register (GPIO0 to 31)(32-63)(64-95)—反转</span></span><br></pre></td></tr></table></figure><p><strong>3、中断寄存器</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   GPIOXINT1SEL; <span class="comment">// XINT1 GPIO Input Selection</span></span><br><span class="line">   GPIOXINT2SEL; <span class="comment">// XINT2 GPIO Input Selection</span></span><br><span class="line"></span><br><span class="line">   GPIOXNMISEL;  <span class="comment">// XNMI_Xint13 GPIO Input Selection</span></span><br><span class="line"></span><br><span class="line">   GPIOXINT3SEL; <span class="comment">// XINT3 GPIO Input Selection</span></span><br><span class="line"></span><br><span class="line">   GPIOXINT4SEL; <span class="comment">// XINT4 GPIO Input Selection</span></span><br><span class="line"></span><br><span class="line">   GPIOXINT5SEL; <span class="comment">// XINT5 GPIO Input Selection</span></span><br><span class="line"></span><br><span class="line">   GPIOXINT6SEL; <span class="comment">// XINT6 GPIO Input Selection</span></span><br><span class="line"></span><br><span class="line">   GPIOXINT7SEL; <span class="comment">// XINT7 GPIO Input Selection</span></span><br><span class="line"></span><br><span class="line">   GPIOLPMSEL;   <span class="comment">// Low power modes GP I/O input select</span></span><br></pre></td></tr></table></figure><blockquote><p>可以对GPIO0-63进行外部中断设置；</p></blockquote><p>具体定义在DSP28335Gpio.h中，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GPIO_CTRL_REGS</span> &#123;</span></span><br><span class="line">   <span class="keyword">union</span>  GPACTRL_REG  GPACTRL;   <span class="comment">// GPIO A Control Register (GPIO0 to 31)</span></span><br><span class="line">   <span class="keyword">union</span>  GPA1_REG     GPAQSEL1;  <span class="comment">// GPIO A Qualifier Select 1 Register (GPIO0 to 15)</span></span><br><span class="line">   <span class="keyword">union</span>  GPA2_REG     GPAQSEL2;  <span class="comment">// GPIO A Qualifier Select 2 Register (GPIO16 to 31)</span></span><br><span class="line">   <span class="keyword">union</span>  GPA1_REG     GPAMUX1;   <span class="comment">// GPIO A Mux 1 Register (GPIO0 to 15)</span></span><br><span class="line">   <span class="keyword">union</span>  GPA2_REG     GPAMUX2;   <span class="comment">// GPIO A Mux 2 Register (GPIO16 to 31)</span></span><br><span class="line">   <span class="keyword">union</span>  GPADAT_REG   GPADIR;    <span class="comment">// GPIO A Direction Register (GPIO0 to 31)</span></span><br><span class="line">   <span class="keyword">union</span>  GPADAT_REG   GPAPUD;    <span class="comment">// GPIO A Pull Up Disable Register (GPIO0 to 31)</span></span><br><span class="line">   Uint32              rsvd1;</span><br><span class="line">   <span class="keyword">union</span>  GPBCTRL_REG  GPBCTRL;   <span class="comment">// GPIO B Control Register (GPIO32 to 63)</span></span><br><span class="line">   <span class="keyword">union</span>  GPB1_REG     GPBQSEL1;  <span class="comment">// GPIO B Qualifier Select 1 Register (GPIO32 to 47)</span></span><br><span class="line">   <span class="keyword">union</span>  GPB2_REG     GPBQSEL2;  <span class="comment">// GPIO B Qualifier Select 2 Register (GPIO48 to 63)</span></span><br><span class="line">   <span class="keyword">union</span>  GPB1_REG     GPBMUX1;   <span class="comment">// GPIO B Mux 1 Register (GPIO32 to 47)</span></span><br><span class="line">   <span class="keyword">union</span>  GPB2_REG     GPBMUX2;   <span class="comment">// GPIO B Mux 2 Register (GPIO48 to 63)</span></span><br><span class="line">   <span class="keyword">union</span>  GPBDAT_REG   GPBDIR;    <span class="comment">// GPIO B Direction Register (GPIO32 to 63)</span></span><br><span class="line">   <span class="keyword">union</span>  GPBDAT_REG   GPBPUD;    <span class="comment">// GPIO B Pull Up Disable Register (GPIO32 to 63)</span></span><br><span class="line">   Uint16              rsvd2[<span class="number">8</span>];</span><br><span class="line">   <span class="keyword">union</span>  GPC1_REG     GPCMUX1;   <span class="comment">// GPIO C Mux 1 Register (GPIO64 to 79)</span></span><br><span class="line">   <span class="keyword">union</span>  GPC2_REG     GPCMUX2;   <span class="comment">// GPIO C Mux 2 Register (GPIO80 to 95)</span></span><br><span class="line">   <span class="keyword">union</span>  GPCDAT_REG   GPCDIR;    <span class="comment">// GPIO C Direction Register (GPIO64 to 95)</span></span><br><span class="line">   <span class="keyword">union</span>  GPCDAT_REG   GPCPUD;    <span class="comment">// GPIO C Pull Up Disable Register (GPIO64 to 95)</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GPIO_DATA_REGS</span> &#123;</span></span><br><span class="line">   <span class="keyword">union</span>  GPADAT_REG       GPADAT;       <span class="comment">// GPIO Data Register (GPIO0 to 31)</span></span><br><span class="line">   <span class="keyword">union</span>  GPADAT_REG       GPASET;       <span class="comment">// GPIO Data Set Register (GPIO0 to 31)</span></span><br><span class="line">   <span class="keyword">union</span>  GPADAT_REG       GPACLEAR;     <span class="comment">// GPIO Data Clear Register (GPIO0 to 31)</span></span><br><span class="line">   <span class="keyword">union</span>  GPADAT_REG       GPATOGGLE;    <span class="comment">// GPIO Data Toggle Register (GPIO0 to 31) </span></span><br><span class="line">   <span class="keyword">union</span>  GPBDAT_REG       GPBDAT;       <span class="comment">// GPIO Data Register (GPIO32 to 63)</span></span><br><span class="line">   <span class="keyword">union</span>  GPBDAT_REG       GPBSET;       <span class="comment">// GPIO Data Set Register (GPIO32 to 63)</span></span><br><span class="line">   <span class="keyword">union</span>  GPBDAT_REG       GPBCLEAR;     <span class="comment">// GPIO Data Clear Register (GPIO32 to 63)</span></span><br><span class="line">   <span class="keyword">union</span>  GPBDAT_REG       GPBTOGGLE;    <span class="comment">// GPIO Data Toggle Register (GPIO32 to 63)</span></span><br><span class="line">   <span class="keyword">union</span>  GPCDAT_REG       GPCDAT;       <span class="comment">// GPIO Data Register (GPIO64 to 95)</span></span><br><span class="line">   <span class="keyword">union</span>  GPCDAT_REG       GPCSET;       <span class="comment">// GPIO Data Set Register (GPIO64 to 95)</span></span><br><span class="line">   <span class="keyword">union</span>  GPCDAT_REG       GPCCLEAR;     <span class="comment">// GPIO Data Clear Register (GPIO64 to 95)</span></span><br><span class="line">   <span class="keyword">union</span>  GPCDAT_REG       GPCTOGGLE;    <span class="comment">// GPIO Data Toggle Register (GPIO64 to 95)</span></span><br><span class="line">   Uint16                  rsvd1[<span class="number">8</span>];</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">GPIO_INT_REGS</span> &#123;</span></span><br><span class="line">   <span class="keyword">union</span>  GPIOXINT_REG     GPIOXINT1SEL; <span class="comment">// XINT1 GPIO Input Selection</span></span><br><span class="line">   <span class="keyword">union</span>  GPIOXINT_REG     GPIOXINT2SEL; <span class="comment">// XINT2 GPIO Input Selection</span></span><br><span class="line">   <span class="keyword">union</span>  GPIOXINT_REG     GPIOXNMISEL;  <span class="comment">// XNMI_Xint13 GPIO Input Selection</span></span><br><span class="line">   <span class="keyword">union</span>  GPIOXINT_REG     GPIOXINT3SEL; <span class="comment">// XINT3 GPIO Input Selection</span></span><br><span class="line">   <span class="keyword">union</span>  GPIOXINT_REG     GPIOXINT4SEL; <span class="comment">// XINT4 GPIO Input Selection</span></span><br><span class="line">   <span class="keyword">union</span>  GPIOXINT_REG     GPIOXINT5SEL; <span class="comment">// XINT5 GPIO Input Selection</span></span><br><span class="line">   <span class="keyword">union</span>  GPIOXINT_REG     GPIOXINT6SEL; <span class="comment">// XINT6 GPIO Input Selection</span></span><br><span class="line">   <span class="keyword">union</span>  GPIOXINT_REG     GPIOXINT7SEL; <span class="comment">// XINT7 GPIO Input Selection</span></span><br><span class="line">   <span class="keyword">union</span>  GPADAT_REG       GPIOLPMSEL;   <span class="comment">// Low power modes GP I/O input select</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注意：GPIO相关寄存器介绍</strong></p><blockquote><p>1、GPxMUX寄存器（功能选择寄存器）</p><p>每个I/O口都有一个功能选择寄存器，功能选择寄存器主要用于选择I/O工作在特殊功能还是通用数组I/O模式。在复位时，所有GPIO配置成通用数字模式。</p><p>1）如果GPxMUX.bit = 0，配置成通用数字I/O功能；</p><p>2）如果GPxMUX.bit = 1   2  3，配置成特殊外设功能口（如SCI、CAN）；</p><p>I/O的输入功能和外设的输入通道总是被使能的，输出通道是通用数组I/O和特殊外设复用的。如果引脚配置成通用数组I/O功能，相应的外设功能将被禁止。</p><p>2、GPxDIR（方向控制寄存器）</p><p>每个I/O口都有数据方向控制寄存器，数据方向控制寄存器用于设置通用数字I/O为输入还是输出口，在复位时，引脚的默认状态为输入状态。</p><p>1）如果GPxDIR.bit = 0，引脚设置为通用数字量输入；</p><p>2）如果GPxDIR.bit = 1，引脚设置为通用数字量输出；</p><p>复位时，GPxMUX和GPxDIR默认值都为0，所以在复位时，引脚的默认状态为数字I/O输入。</p><p>3、GPxDAT寄存器（数据寄存器）</p><p>每个I/O口都有一个数据寄存器，数据寄存器是可读可写寄存器。</p><p>1）I/O设置为输出功能时，如果GPxDAT.bit = 0，那么操作将会使相应的引脚拉低；</p><p>2）I/O口设置为输入功能时，如果GPxDAT.bit = 0，反映相应的引脚状态为低电平；</p><p>3）I/O口设置为输出功能时，如果GPxDAT.bit = 1，那么操作将会使相应的引脚拉高；</p><p>4）I/O口设置为输入功能时，如果GPxDAT.bit = 1，反映相应的引脚状态为高电平。</p><p>需要说明的是，当用户试图改变一个数字I/O的状态时，不要改变另一个I/O的引脚状态。</p><p>4、GOxSET寄存器（置位寄存器）</p><p>每个I/O口都有一个置位寄存器，置位寄存器是只写寄存器，任何读操作都返回0，如果相应的引脚配置成数据量输出，写1后相应的引脚会置高，写0时没有反映。</p><p> 1）如果GPxSET.bit = 0，没有影响；</p><p>2）引脚设置为输出时，如果GPxSET.bit = 1，那么操作将会使引脚置高。</p><p>5、GPxCLEAR寄存器（清除寄存器）</p><p>每个I/O口都有一个清除寄存器，清除寄存器是只写寄存器，任何读操作都返回0。</p><p>1）如果GPxCLEAR.bit = 0，没有影响；</p><p>2）引脚设置为输出时，如果GPxCLEAR.bit = 1，将相应的引脚置成低电平。</p><p>6、GPxTOGGLE寄存器（取反触发寄存器）</p><p>每个I/O口都有一个取反触发寄存器，该寄存器是只写寄存器，任何读操作都返回0。</p><p>1）如果GPxTOGGLE.bit = 0，没有影响；</p><p>2）引脚设置为输出时，如果GPxTOGGLE.bit = 1，那么操作将使相应的引脚取反。</p></blockquote><hr><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p><strong>1.中断系统</strong></p><p>   在这里我们要十分清楚DSP的中断系统。C28XX一共有16个中断源，其中有2个不可屏蔽的中断RESET和NMI、定时器1和定时器2分别使用中断13和14。这样还有12个中断都直接连接到外设中断扩展模块PIE上。说的简单一点就是PIE通过12根线与28335核的12个中断线相连。而PIE的另外一侧有12*8根线分别连接到外设，如AD、SPI、EXINT等等。</p><p>   PIE共管理12*8=96个外部中断。这12组大中断由28335核的中断寄存器IER来控制，即IER确定每个中断到底属于哪一组大中断（如IER |= M_INT12; 说明我们要用第12组的中断，但是第12组里面的什么中断CPU并不知道需要再由PIEIER确定）。</p><p>   接下来再由PIE模块中的寄存器PIEIER中的低8确定该中断是这一组的第几个中断，这些配置都要告诉CPU（我们不难想象到PIEIER共有12总即从PIEIER1-PIEIER12）。另外，PIE模块还有中断标志寄存器PIEIFR，同样它的低8位是来自外部中断的8个标志位，同样CPU的IFR寄存器是中断组的标志寄存器。由此看来，CPU的所有中断寄存器控制12组的中断，PIE的所有中断寄存器控制每组内8个的中断。除此之外，我们用到哪一个外部中断，相应的还有外部中断的寄存器，需要注意的就是<strong>外部中断的标志要自己通过软件来清零</strong>。而<strong>PIE和CPU的中断标志寄存器由硬件来清零。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">EALLOW;  <span class="comment">// This is needed to write to EALLOW protected registers </span></span><br><span class="line">PieVectTable.XINT2 = &amp;ISRExint;          <span class="comment">//告诉中断入口地址</span></span><br><span class="line">EDIS;    <span class="comment">// This is needed to disable write to EALLOW protected registers</span></span><br><span class="line">PieCtrlRegs.PIECTRL.bit.ENPIE = <span class="number">1</span>;       <span class="comment">// Enable the PIE block使能PIE</span></span><br><span class="line">PieCtrlRegs.PIEIER1.bit.INTx5= <span class="number">1</span>;        <span class="comment">//使能第一组中的中断5</span></span><br><span class="line">IER |= M_INT1;                           <span class="comment">// Enable CPU 第一组中断</span></span><br><span class="line">EINT;                                    <span class="comment">// Enable Global interrupt INTM</span></span><br><span class="line">ERTM;                                    <span class="comment">// Enable Global realtime interrupt DBGM</span></span><br></pre></td></tr></table></figure><p>也就是说，12组中的每个中断都要完成上面的相同配置，剩下的才是去配置自己的中断。如我们提到的EXINT，即外面来个低电平我们就进入中断，完成我们的程序。在这里要介绍一下，DSP的GPIO口都可以配置为外部中断口，其配置方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">GpioCtrlRegs.GPBMUX2.bit.GPIO54 = <span class="number">0</span>; <span class="comment">//选择他们是GPIO口</span></span><br><span class="line">GpioCtrlRegs.GPBMUX2.bit.GPIO55 = <span class="number">0</span>;</span><br><span class="line">GpioCtrlRegs.GPBMUX2.bit.GPIO56 = <span class="number">0</span>;</span><br><span class="line">GpioCtrlRegs.GPBMUX2.bit.GPIO57 = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">GpioCtrlRegs.GPBDIR.bit.GPIO54 = <span class="number">0</span>;<span class="comment">//选择他们都是输入口</span></span><br><span class="line">GpioCtrlRegs.GPBDIR.bit.GPIO55 = <span class="number">0</span>;</span><br><span class="line">GpioCtrlRegs.GPBDIR.bit.GPIO56 = <span class="number">0</span>;</span><br><span class="line">GpioCtrlRegs.GPBDIR.bit.GPIO57 = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">GpioCtrlRegs.GPBQSEL2.bit.GPIO54= <span class="number">0</span>;<span class="comment">//使GPIO时钟和系统时钟一样 且支持GPIO</span></span><br><span class="line">GpioCtrlRegs.GPBQSEL2.bit.GPIO55= <span class="number">0</span>;</span><br><span class="line">GpioCtrlRegs.GPBQSEL2.bit.GPIO56= <span class="number">0</span>;<span class="comment">//配置输入口权限，对于选择为输入口的需配置GPACTRL,GPBCTRL,GPAQSEL1</span></span><br><span class="line">GpioCtrlRegs.GPBQSEL2.bit.GPIO57= <span class="number">0</span>;<span class="comment">//GPAQSEL2, GPBQSEL1, and GPBQSEL2寄存器所有输入信号与CPU输出系统时钟同步；</span></span><br><span class="line"> </span><br><span class="line">GpioIntRegs.GPIOXINT3SEL.bit.GPIOSEL = <span class="number">54</span>;<span class="comment">//中断3选择GPIO</span></span><br><span class="line">GpioIntRegs.GPIOXINT4SEL.bit.GPIOSEL = <span class="number">55</span>;</span><br><span class="line">GpioIntRegs.GPIOXINT5SEL.bit.GPIOSEL = <span class="number">56</span>;</span><br><span class="line">GpioIntRegs.GPIOXINT6SEL.bit.GPIOSEL = <span class="number">57</span>; </span><br><span class="line"> </span><br><span class="line">XIntruptRegs.XINT3CR.bit.POLARITY= <span class="number">0</span>;<span class="comment">//触发模式为下降沿触发</span></span><br><span class="line">XIntruptRegs.XINT4CR.bit.POLARITY= <span class="number">0</span>;</span><br><span class="line">XIntruptRegs.XINT5CR.bit.POLARITY= <span class="number">0</span>;</span><br><span class="line">XIntruptRegs.XINT6CR.bit.POLARITY= <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">XIntruptRegs.XINT3CR.bit.ENABLE = <span class="number">1</span>;<span class="comment">//使能中断</span></span><br><span class="line">XIntruptRegs.XINT4CR.bit.ENABLE = <span class="number">1</span>;</span><br><span class="line">XIntruptRegs.XINT5CR.bit.ENABLE = <span class="number">1</span>;</span><br><span class="line">XIntruptRegs.XINT6CR.bit.ENABLE = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>注意一点就是外部中断1和2只能对GPIO0—GPIO31配置；外部中断3和4、5、6、7只对GPIO32—GPIO63配置。</p><p>GPIO分为A(0-31)、B(32-63)、C(64-87);C组的不能配置为外部中断；</p><p><strong>2.如何开启某个中断？</strong></p><p>设置中断向量。例如：<code>PieVectTable.ADCINT = &amp;adc_isr;</code>等<br>打开PIE控制器。<code>PieCtrlRegs.PIECTRL.bit.ENPIE = 1;</code><br>使能PIE中对应外设的中断（相应group的相应pin）。例如：<code>PieCtrlRegs.PIEIER1.bit.INTx8 = 1; PieCtrlRegs.PIEIER1.bit.INTx6 = 1;</code>等<br>使能CPU的相应中断<code>（INT1~INT12）IER |= M_INT1;</code><br>使能CPU响应中断EINT、ERTM;;</p><p><strong>3.中断标志有几级？作用是什么？</strong></p><p>中断标志主要有三级CPU（有16个标志位）、PIE（有12组每组有12个标志位）和外设（有的外设没有）。</p><p>标志位在中断发生后锁存中断状态，即表示中断发生。在CPU响应中断后，会自动清除cpu级别的标志位IFR bit，同时将INTM bit 置位，以防止其它中断的发生；</p><p>CPU在从PIE中取中断向量时PIE会自动清除PIE级别的标志位PIEIFRx.y。所以在进入中断处理程序后除了外设所有中断位都已经清除。</p><p>而中断处理程序中需要清除PIEACKx和外设的中断标志位（如果有的话）。</p><p>在CPU响应一个中断后，在进入ISR的时候，默认会关断全局中断，即在执行中断服务程序时，不会有其他中断来打断CPU，包括本次的中断事件。另外，如果外设的中断标志位不清除，不会循环进入这个中断服务函数，这个外设中断被阻断了。所以只有清除外设的中断服务程序，才能响应下一次的外设中断。PIEACK同理，如果没有PIEACK，这组所有中断都被阻断。</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="http://www.ti.com/lit/ds/symlink/tms320f28335.pdf" target="_blank" rel="noopener">TMS320F2833x Datasheet</a></p><p>[2] <a href="https://blog.csdn.net/scottly1" target="_blank" rel="noopener">风雨也无晴 CSDN</a></p><p>[3] <a href="http://blog.sina.com.cn/s/blog_a7c071b30102wp2c.html" target="_blank" rel="noopener">GPIO blog</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> DSP28335 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSP 串口接口及通信通信</title>
      <link href="/2019/08/09/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
      <url>/2019/08/09/%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="对串口通信进行简单知识点梳理"><a href="#对串口通信进行简单知识点梳理" class="headerlink" title="对串口通信进行简单知识点梳理"></a>对串口通信进行简单知识点梳理</h2><p>串行通信可以分为两大类：</p><p>同步通信：典型 I2C,SPI</p><p>异步通信：典型 SCI(serial communication interface,串行通信接口)</p><blockquote><p>进行串口异步通信接口，一般可以看作UART口(Universal Asynchronous Receiver Transmitter：通用异步收发器/异步串行通信口)</p></blockquote><blockquote><p>UART、COM指物理接口形式(硬件), TTL、RS232、RS485 指电平标准(电信号)</p></blockquote><hr><h2 id="SCI-串口"><a href="#SCI-串口" class="headerlink" title="SCI 串口"></a>SCI 串口</h2><p>先来补充一个概念:FIFO（First Input First Output），即先进先出队列。</p><h3 id="SCI模块介绍"><a href="#SCI模块介绍" class="headerlink" title="SCI模块介绍"></a>SCI模块介绍</h3><p>TMS320F28335内部有三个SCI模块，SCIA、SCIB、SCIC。</p><p>每一个SCI模块都有一个接收器和发送器，SCI的接收器和发送器各有一个16级的FIFO(First In First Out先入先出)队列，它们都还有自己独立的使能位和中断位；可以工作在半双工或全双工模式。</p><p><strong>1. SCI的CPU 接口</strong><br>SCI 模块具有两个引脚， SCITXDA 和 SCIRXDA，分别实现发送数据和接收数据的功能，这两个引脚对应于 GPIOF 模块的第4和第5位，在编程初始化的时候，需要将GPIOFMUX 寄存器的第4和第5位置为1，才能使得这两个引脚具有发送和接收的功能，否则就是普通的I/O引脚。外部晶振通 PLL 模块产生了CPU 的系统时钟SYSCLKOUT，然后SYSCLKOUT经过低速预定标器之后输出低速时钟LSPCLK 供给SCI。要保证SCI的正常运行，系统控制模块下必须使能SCI的时钟，也就是在系统初始化函数中需要将外设时钟控制寄存器PCLKCR的SCIAENCLK位置1。从下图，我们可以清楚的看到SCIA可以产生两个中断，SCIRXINTA 和SCITXINTA，即发送中断和接收中断。</p><p><img src="https://s2.ax1x.com/2019/08/10/eOLCtK.png" alt="eOLCtK.png"></p><p><strong>2. SCI相关寄存器</strong></p><p>SCICR：SCI通信参数设置寄存器，设置数据位，停止位，奇偶校验位。</p><p>SCICTL1：使能SCI的发送接收功能 <strong>注：SW RESET需置1</strong></p><p>SCILBAUD、SCIHBAUD：通信速率（波特率）的设置。</p><p>SCICTL2：使能接收发送中断，以及发送中断标志位。</p><p>SCIRXST：接收相关标志位。</p><p>SCIRXBUF：8位发送缓存寄存器</p><p>SCITXBUF：8位接收缓存寄存器。</p><p>SCI中断配置：</p><p>SCI的中断采用三级中断管理。分别是SCI外设中断，PIE中断，CPU中断。SCIA的PIE中断是第九组，分别是INT９.１和INT９.２.PIE中断的配置在前面已经说过了，此处不多说。<strong>注意：在中断不要忘记将PIEACK写１清除。</strong></p><p>SCI的FIFO模式：</p><p>FIFO：先入先出队列。SCI采用这种模式时，接收或者发送完指定字节数量的数据后，才进入中断处理。这样可以节省了CPU的使用效率，CPU不用每次接收完一个字节的数据后就进入中断处理。</p><p>相关寄存器：</p><p>SCIFFTX：配置发送的数据量，使能SCI的FIFO模式，使能中断等</p><p>SCIFFRX：配置接收的数据量，使能接收中断等。</p><p>在学习FIFO模式时，遇到一个问题，就是接收完指定数量字节的数据后，总是重复进入两次发送中断，一次找不到原因。下面贴出代码，希望各位读者不吝赐教。</p><p><strong>3. SCI 模块发送和接收数据的工作原理</strong></p><p>SCI 模块的工作原理如下图所示，之所以SCI 能工作于全双工模式，是因为它有独立的数据发送器和数据接收器，这样能够保证SCI既能够同时进行，也能够独立进行发送和接收的操作。</p><p>SCI 发送数据的过程如下：如下图右半部分所示， 在FIFO功能使能的情况下， 首先，发送数据缓冲寄存器SCITXBUF从TX FIFO 中获取由 CPU 加载的需要发送的数据，然后 SCITXBUF将数据传输给发送移位寄存器TXSHF， 如果SCI的发送功能使能， TXSHF 则将接收到的数据逐位逐位的移到 SCITXD 引脚上。</p><p>SCI接收数据的过程如下：如X下图的左半部分所示，首先，接收移位寄存器 RXSHF 逐位逐位的接收来自于 SCIRXD 引脚的数据， 如果 SCI 的接收功能使能， RXSHF 将这些数据传输给接收缓冲寄存器 SCIRXBUF，CPU 就能从 SCIRXBUF 读取外部发送来的数据。当然，如果 FIFO 功能使能的话， SCIRXBUF 会将数据加载到RX FIFO 的队列中， CPU 再从FIFO 的队列读取数据。</p><p><img src="https://s2.ax1x.com/2019/08/10/eOL09U.png" alt="eOL09U.png"></p><p><strong>4. SCI数据格式</strong></p><p>在 SCI 中，通信协议体现在 SCI 的数据格式上。 通常将 SCI 的数据格式称之为可编程的数据格式，原因就是可以通过 SCI 的通信控制寄存器 SCICCR 来进行设置，规定通信过程中所使用的数据格式。 </p><p>在<strong>空闲线模式</strong>下， SCI 发送或者接收一帧的数据格式如图 4 所示，其中 LSB 是数据的最低位， MSB 是数据的最高位。</p><p><img src="https://s2.ax1x.com/2019/08/10/eOOCbn.png" alt="eOOCbn.png"></p><blockquote><p>使用 SCICCR 进行数据格式编程</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SciaRegs.SCICCR.bit.SCICHAR=<span class="number">8</span>;</span><br><span class="line"><span class="comment">//选择数据长度，为 8 个数据位</span></span><br><span class="line">SciaRegs.SCICCR.bit.PARITYENA=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//开启极性功能，值为 0 的时候取消极性功能</span></span><br><span class="line">SciaRegs.SCICCR.bit.PARITY=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//在开启极性功能的前提下，该位值为 0 时选择偶极性，值为 1 时选择奇极性</span></span><br><span class="line">SciaRegs.SCICCR.bit.STOPBITS=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//选择停止位，该位为 0 时有 1 个停止位，该位为 1 时有 2 个停止位</span></span><br></pre></td></tr></table></figure><blockquote><p>当然，上述这几个语句，我们也可以合并成如下的语句：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SciaRegs.SCICCR.all=<span class="number">0x13</span>;</span><br></pre></td></tr></table></figure><p><strong>5. SCI通信波特率</strong></p><p>所谓的波特率就是指每秒所能发送的位数。<br>SCI波特率设置寄存器SCIHBAUD和SCILBAUD，0-15是高字节与低字节连在一起，构成16位波特率设置寄存器BRR。BRR = SCIHBAUD + SCILBAUD</p><p>如果1&lt;= BRR &lt;=65535，那么SCI波特率=LSPCLK / ( (BRR+1) * 8 )，由此，可以带入你需要的波特率，既可以得到BRR的值；<br>如果BRR = 0，那么SCI波特率=LSPCLK/ 16</p><p> 我们举例来进行说明。例如外部晶振位 30M，经过 PLL 之后 SYSCLKOUT 为 150MHz，然后，当低速预定标器 LOSPCP 的值为 2 的时候， SYSCLKOUT 经过低速预定标器之后产生&gt;低速外设时钟 LSPCLK 为 37.5MHz，也就是说 SCI 的时钟为 37.5MHz。如果我们需要 SCI 的波特率为 19200，则将 LSPCLK 和波特率的数值代入式 1，便可得到BRR=243.14，由于寄存器都是正整数，所以省略掉小数后可以得到 BRR=243。将 243 转换成 16 进制是 0xF3，因此 SCIHBAUD 的值为 0， SCIHBAUD 的值为 0XF3。由于省略了小数，将会产生 0.06%的误差。 当 LSPCLK 为 37.5M 时，对于 SCI 常见的波特率，其寄存器的值如下表所示：</p><p><img src="https://s2.ax1x.com/2019/08/10/eOXO1S.png" alt="eOXO1S.png"></p><p><strong>6. 串口SCI编程</strong></p><p><strong>A.</strong></p><blockquote><p>先初始化IO管脚 (以SCI-A为例，SCI-B、SCI-C的初始化方法一样，就是照着改对应的管脚就行)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitSciaGpio</span><span class="params">()</span> <span class="comment">//初始化SCIA的GPIO管脚为例子</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">EALLOW;</span><br><span class="line"><span class="comment">//根据硬件设计决定采用GPIO28/29和GPIO35/36中的哪一组。这里以35/36为例</span></span><br><span class="line"><span class="comment">//定义管脚为上拉</span></span><br><span class="line">GpioCtrlRegs.GPBPUD.bit.GPIO36 = <span class="number">0</span>;</span><br><span class="line">GpioCtrlRegs.GPBPUD.bit.GPIO35 = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//定义管脚为异步输入</span></span><br><span class="line">GpioCtrlRegs.GPBQSEL1.bit.GPIO36 = <span class="number">3</span>;</span><br><span class="line"><span class="comment">//配置管脚为SCI功能管脚</span></span><br><span class="line">GpioCtrlRegs.GPBMUX1.bit.GPIO36 = <span class="number">1</span>;</span><br><span class="line">GpioCtrlRegs.GPBMUX1.bit.GPIO35 = <span class="number">1</span>;</span><br><span class="line">EDIS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>B.</strong></p><blockquote><p>SCI初始化配置</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scia_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SciaRegs.SCICCR.all =<span class="number">0x0007</span>; <span class="comment">// 1 stop bit, No loopback</span></span><br><span class="line"><span class="comment">// No parity,8 char bits,</span></span><br><span class="line"><span class="comment">// async mode, idle-line protocol</span></span><br><span class="line">SciaRegs.SCICTL1.all =<span class="number">0x0003</span>; <span class="comment">// enable TX, RX, internal SCICLK,</span></span><br><span class="line"><span class="comment">// Disable RX ERR, SLEEP, TXWAKE</span></span><br><span class="line">SciaRegs.SCICTL2.bit.TXINTENA =<span class="number">1</span>; <span class="comment">//发送中断使能</span></span><br><span class="line">SciaRegs.SCICTL2.bit.RXBKINTENA =<span class="number">1</span>;<span class="comment">//接收中断使能</span></span><br><span class="line">SciaRegs.SCIHBAUD =<span class="number">0x0001</span>; <span class="comment">// 9600 baud @LSPCLK = 37.5MHz.</span></span><br><span class="line">SciaRegs.SCILBAUD =<span class="number">0x00E7</span>;</span><br><span class="line">SciaRegs.SCICTL1.all =<span class="number">0x0023</span>; <span class="comment">// Relinquish SCI from Reset</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C.</strong></p><blockquote><p>接着进行中断的配置</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EALLOW; <span class="comment">// This is needed to write to EALLOW protected registers</span></span><br><span class="line">PieVectTable.SCIRXINTA = &amp;sciaRxIsr;</span><br><span class="line">PieVectTable.SCITXINTA = &amp;sciaTxIsr;</span><br><span class="line">PieVectTable.SCIRXINTB = &amp;scibRxIsr;</span><br><span class="line">PieVectTable.SCITXINTB = &amp;scibTxIsr;</span><br><span class="line">EDIS; <span class="comment">// This is needed to disable write to EALLOW protected registers</span></span><br></pre></td></tr></table></figure><p><strong>D.</strong></p><blockquote><p>上面是将SCIA和SCIB的中断服务程序连到PIE的中断表中，发生中断就会跑到你的ISR去了，下面是开中断：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PieCtrlRegs.PIECTRL.bit.ENPIE = <span class="number">1</span>; <span class="comment">// Enable the PIE block</span></span><br><span class="line">PieCtrlRegs.PIEIER9.bit.INTx1=<span class="number">1</span>; <span class="comment">// PIE Group 9, int1</span></span><br><span class="line">PieCtrlRegs.PIEIER9.bit.INTx2=<span class="number">1</span>; <span class="comment">// PIE Group 9, INT2</span></span><br><span class="line">PieCtrlRegs.PIEIER9.bit.INTx3=<span class="number">1</span>; <span class="comment">// PIE Group 9, INT3</span></span><br><span class="line">PieCtrlRegs.PIEIER9.bit.INTx4=<span class="number">1</span>; <span class="comment">// PIE Group 9, INT4</span></span><br><span class="line">IER = <span class="number">0x100</span>; <span class="comment">// Enable CPU INT</span></span><br><span class="line">EINT;</span><br></pre></td></tr></table></figure><p>这样串口基本就OK了。</p><hr><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://www.cnblogs.com/forever5325/p/9590141.html" target="_blank" rel="noopener">接口及协议总结</a><br>[2] <a href="https://blog.csdn.net/LSG_Down/article/details/80898638" target="_blank" rel="noopener">SCI通信</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 上位机 </tag>
            
            <tag> 串口通信 </tag>
            
            <tag> DSP28335 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>企业岗位要求</title>
      <link href="/2019/08/06/%E4%BC%81%E4%B8%9A%E5%B2%97%E4%BD%8D%E8%A6%81%E6%B1%82/"/>
      <url>/2019/08/06/%E4%BC%81%E4%B8%9A%E5%B2%97%E4%BD%8D%E8%A6%81%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="几家企业的岗位要求，激励自己不断前进！"><a href="#几家企业的岗位要求，激励自己不断前进！" class="headerlink" title="几家企业的岗位要求，激励自己不断前进！"></a>几家企业的岗位要求，激励自己不断前进！</h1><p><img src="https://s2.ax1x.com/2019/08/06/ehuVgO.png" alt="ehuVgO.png"></p><p><img src="https://s2.ax1x.com/2019/08/06/ehuZvD.png" alt="ehuZvD.png"></p><p><img src="https://s2.ax1x.com/2019/08/06/ehumKe.png" alt="ehumKe.png"></p><p><img src="https://s2.ax1x.com/2019/08/06/ehuAC6.png" alt="ehuAC6.png"></p><p><img src="https://s2.ax1x.com/2019/08/06/ehuE8K.png" alt="ehuE8K.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 岗位要求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSP电机平台上位机编写(Python+pyqt)</title>
      <link href="/2019/08/06/DSP%E5%B9%B3%E5%8F%B0%E4%B8%8A%E4%BD%8D%E6%9C%BA%E5%BC%80%E5%8F%91/"/>
      <url>/2019/08/06/DSP%E5%B9%B3%E5%8F%B0%E4%B8%8A%E4%BD%8D%E6%9C%BA%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p><strong>准备给DSP电机平台增加一个电机转速调节的上位机。</strong></p><blockquote><p><strong>目的：</strong></p><p>1.学习python，并利用它做点东西</p><p>2.对串口通信有更加深刻的了解</p></blockquote><blockquote><p><strong>计划步骤：</strong></p><p>1.先把Python的基础知识有大体了解</p><p>2.学习pyqt并绘制上位机界面</p><p>3.做好串口通信的工作</p></blockquote><h1 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h1><p>环境搭建参考： <a href="http://www.roselady.vip/a/cangjingge/boke/2018/0227/691.html" target="_blank" rel="noopener">环境搭建</a></p><p>再由.ui转成.py时，再最后添加：<a href="https://jingyan.baidu.com/article/656db918264acbe380249c50.html" target="_blank" rel="noopener">参考</a></p><p>Ui_MainWindow 要和前面类名一致</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWindow</span><span class="params">(QtWidgets.QMainWindow, Ui_MainWindow)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(MyWindow, self).__init__()</span><br><span class="line">        self.setupUi(self)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    mywindow = MyWindow()</span><br><span class="line">    mywindow.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><h1 id="槽函数"><a href="#槽函数" class="headerlink" title="槽函数"></a>槽函数</h1><hr><p>未完待续~~</p>]]></content>
      
      
      
        <tags>
            
            <tag> pyqt </tag>
            
            <tag> DSP平台 </tag>
            
            <tag> 上位机 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>柔性负载</title>
      <link href="/2019/08/05/%E6%9F%94%E6%80%A7%E8%B4%9F%E8%BD%BD/"/>
      <url>/2019/08/05/%E6%9F%94%E6%80%A7%E8%B4%9F%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="关于肖老师柔性负载的文献综述"><a href="#关于肖老师柔性负载的文献综述" class="headerlink" title="关于肖老师柔性负载的文献综述"></a><center>关于肖老师柔性负载的文献综述</center></h2><h3 id="一、柔性负载建模–中心刚体-悬臂梁系统-欧拉-伯努利梁-5"><a href="#一、柔性负载建模–中心刚体-悬臂梁系统-欧拉-伯努利梁-5" class="headerlink" title="一、柔性负载建模–中心刚体-悬臂梁系统(欧拉-伯努利梁)[5]"></a>一、柔性负载建模–中心刚体-悬臂梁系统(欧拉-伯努利梁)<sup>[5]</sup></h3><p>应用于 工业机器人中的柔性机械臂。单柔性连杆伺服驱动系统如下图所示。图中：u(x,t)为挠性负载在x处的挠度；θm(t)为伺服电机转轴的转角；Ta为伺服电机驱动转矩。</p><img src="https://s2.ax1x.com/2019/08/05/eRZ4G4.png" width="400" height="200" alt="图片名称" align="center"><hr><h3 id="二、PMSM驱动柔性负载相关公式：-2"><a href="#二、PMSM驱动柔性负载相关公式：-2" class="headerlink" title="二、PMSM驱动柔性负载相关公式：[2]"></a>二、PMSM驱动柔性负载相关公式：<sup>[2]</sup></h3><p>在对柔性负载建模后，</p><blockquote><p>该系统的传递函数如下:(Ta表示电磁转矩，参数Ω 表示系统谐振频率， 而 Fa 则可以表示每一阶模态频率的谐振程度，通过系统模型和参数可以很容易地观察系统谐振状况。)(一般选取一阶模态，即Fa，Ω均为标量)</p><img src="https://s2.ax1x.com/2019/08/05/eRuIk6.png" width="300" height="80" alt="图片名称" align="center"></blockquote><blockquote><p>转速环和电流环传递函数</p><img src="https://s2.ax1x.com/2019/08/06/eh7EY8.png" width="380" height="230" alt="图片名称" align="center"><img src="https://s2.ax1x.com/2019/08/20/mYwrBd.png" width height="60" alt="图片名称" align="center"></blockquote><blockquote><p>系统控制框图</p><p><img src="https://s2.ax1x.com/2019/08/06/eh7VfS.png" alt="eh7VfS.png"></p></blockquote><h4 id="1-电流环特征–柔性负载影响小"><a href="#1-电流环特征–柔性负载影响小" class="headerlink" title="(1)电流环特征–柔性负载影响小"></a>(1)电流环特征–柔性负载影响小</h4><blockquote><p>刚性电流环开环传递函数</p><img src="https://s2.ax1x.com/2019/08/13/mC5YtI.png" width="380" height="120" alt="图片名称" align="center"></blockquote><p>与上面的 柔性负载 电流环传递函数相比，其差别主要在分母的第三项。故可以对其分母第三项单独分析。</p><p>但是，由于柔性负载的振动频率与电流环带宽差别较大，因而，柔性对 PMSM 电流环的<u>影响较小</u>.</p><h4 id="2-转速环环特征–柔性负载影响大"><a href="#2-转速环环特征–柔性负载影响大" class="headerlink" title="(2)转速环环特征–柔性负载影响大"></a>(2)转速环环特征–柔性负载<u>影响大</u></h4><blockquote><p>刚性负载 转速外环控制框图</p><img src="https://s2.ax1x.com/2019/08/13/mCO7UU.png" width="300" height="100" alt="图片名称" align="center"></blockquote><blockquote><p>柔性负载 转速外环控制框图（在不考虑电流环影响下，由系统框体可得）</p><img src="https://s2.ax1x.com/2019/08/13/mCOyE8.png" width="500" height="100" alt="图片名称" align="center"></blockquote><blockquote><p>转速环开环伯德图</p><img src="https://s2.ax1x.com/2019/08/13/mCOzb6.png" width="450" height="250" alt="图片名称" align="center"></blockquote><p>结论：</p><ol><li><p>在 PMSM 直接驱动柔性负载系统中，负载柔性对系统电流环影响较小，<strong>对转速环影响较大</strong>。</p></li><li><p>需要在 柔性负载振荡频率处 进行<strong>谐振补偿</strong></p></li></ol><hr><h3 id="三、柔性负载常用控制方法"><a href="#三、柔性负载常用控制方法" class="headerlink" title="三、柔性负载常用控制方法"></a>三、柔性负载常用控制方法</h3><p><img src="https://s2.ax1x.com/2019/08/21/mUXidS.png" alt="mUXidS.png"></p><h4 id="转速环设计"><a href="#转速环设计" class="headerlink" title="转速环设计"></a>转速环设计</h4><h4 id="1-PI设计-3"><a href="#1-PI设计-3" class="headerlink" title="(1)PI设计[3]"></a>(1)PI设计<sup>[3]</sup></h4><blockquote><p>转速环的开环传递函数(II型系统) （系统谐振模态幅值 η ）</p><img src="https://s2.ax1x.com/2019/08/15/mVpHYj.png" width="500" height="250" alt="图片名称" align="center"></blockquote><p>在不考虑电流内环的影响，采用PI调节器 。转速外环的控制框图如下</p><img src="https://s2.ax1x.com/2019/08/13/mCXxzj.png" width="400" height="80" alt="图片名称" align="center"><h4 id="2-状态反馈-PI-调节器控制-4"><a href="#2-状态反馈-PI-调节器控制-4" class="headerlink" title="(2)状态反馈 + PI 调节器控制[4]"></a>(2)状态反馈 + PI 调节器控制<sup>[4]</sup></h4><p> 在PI调节器的基础上，估计系统谐振模态幅值 η 和 负载转矩 T<sub>L</sub></p><img src="https://s2.ax1x.com/2019/08/15/mV9Ijx.png" width="500" height="250" alt="图片名称" align="center"><p>其中 G<sub>FF</sub>(s)是W<sub>m</sub>与 T<sub>L</sub> 解耦得到</p><p>并存在 k<sub>1</sub>、k<sub>2</sub>、k<sub>P</sub>、k<sub>I</sub> 四个可调参数，因而四个极点能够任意配置.</p><hr><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p>[1]丁有爽,肖曦.基于负载位置反馈的永磁同步电机驱动柔性负载谐振抑制方法[J].电工技术学报,2017,32(11):96-110.</p><p>[2]丁有爽,肖曦.永磁同步电机直接驱动柔性负载控制方法[J].电工技术学报,2017,32(04):123-132.</p><p>[3]丁有爽,肖曦.基于极点配置的永磁同步电机驱动柔性负载PI调节器参数确定方法[J].中国电机工程学报,2017,37(04):1225-1239.</p><p>[4]丁有爽,肖曦.基于状态反馈和转矩补偿的永磁同步电机驱动柔性负载控制方法[J].中国电机工程学报,2017,37(13):3892-3900.</p><p>[5]丁有爽,肖曦.伺服系统柔性负载建模方法研究[J].中国电机工程学报,2016,36(03):818-827.</p><p>[6] Hori Y，Sawada H，Chun Y．Slow resonance ratio control for vibration suppression and disturbance rejection in torsional system[J]．IEEE Transactions on Industrial Electronics，1999，46(1)：162-168 </p>]]></content>
      
      
      
        <tags>
            
            <tag> PMSM </tag>
            
            <tag> 柔性负载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于加入站内搜索</title>
      <link href="/2019/08/02/%E5%85%B3%E4%BA%8E%E5%8A%A0%E5%85%A5%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
      <url>/2019/08/02/%E5%85%B3%E4%BA%8E%E5%8A%A0%E5%85%A5%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<p>今天按照网上的加入本站搜索功能 无论如何都加不进去，后来在查看 NEXT给的官方解读中看到解决方法<br>网址如下，查看Local Search方法</p><blockquote><p><a href="https://theme-next.org/docs/third-party-services/search-services" target="_blank" rel="noopener">https://theme-next.org/docs/third-party-services/search-services</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于DSP平台双UDE 参数调试</title>
      <link href="/2019/08/02/%E5%85%B3%E4%BA%8EDSP%E5%B9%B3%E5%8F%B0%E5%8F%8CUDE%E8%B0%83%E8%AF%95/"/>
      <url>/2019/08/02/%E5%85%B3%E4%BA%8EDSP%E5%B9%B3%E5%8F%B0%E5%8F%8CUDE%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<ul><li><p><strong>1.挑选了几组典型数据画图，这里面的滤波器参数都是随意设置的（因为现在还无法确定kp和alpha之间的关系）</strong></p></li><li><p><strong>2.xx_xxx3.fig 中红色为实际数值 蓝色为指令，绿色为经过滤波器的输出结果(画图程序在最后)。</strong></p></li></ul><ul><li><p><strong>3.图中的时间 10000点 = 5s</strong></p></li><li><p><strong>4.Main_twoloop190801.c为源程序。</strong></p></li><li><p><strong>5.文件夹中</strong></p><p>  01-07为电流环调试过程,<br>  08-11为速度环调试过程,<br>  12 给了一个比较极端的速度环滤波器参数。</p></li></ul><blockquote><p>数据对应参数：</p></blockquote><table><thead><tr><th align="center"></th><th align="center">spd_Factor</th><th align="center">spd_kp</th><th align="center">spd_ki</th><th align="center">iq_Factor</th><th align="center">iq_kp</th><th align="center">iq_ki</th></tr></thead><tbody><tr><td align="center">01参数</td><td align="center">0.1667</td><td align="center">0.8</td><td align="center">0.0015</td><td align="center">0.007</td><td align="center">1.0</td><td align="center">0.0025</td></tr><tr><td align="center">05参数</td><td align="center">0.1667</td><td align="center">0.8</td><td align="center">0.0015</td><td align="center">0.007</td><td align="center">2.1</td><td align="center">0.0025</td></tr><tr><td align="center">06参数</td><td align="center">0.1667</td><td align="center">0.8</td><td align="center">0.0015</td><td align="center">0.007</td><td align="center">2.5</td><td align="center">0.0025</td></tr><tr><td align="center">10参数</td><td align="center">0.1667</td><td align="center">3.0</td><td align="center">0.0015</td><td align="center">0.007</td><td align="center">2.5</td><td align="center">0.0025</td></tr><tr><td align="center">12参数</td><td align="center">0.0007</td><td align="center">0.8</td><td align="center">0.0015</td><td align="center">0.007</td><td align="center">2.5</td><td align="center">0.0025</td></tr></tbody></table><ul><li><p><strong>6.画图函数</strong></p>  <figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">plot</span>(t,spd,<span class="string">'r'</span>,<span class="string">'LineWidth'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,spdr<span class="number">-5</span>,<span class="string">'g'</span>,<span class="string">'LineWidth'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,spdc<span class="number">-5</span>,<span class="string">'b'</span>,<span class="string">'LineWidth'</span>,<span class="number">1</span>)</span><br><span class="line">grid on</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">plot</span>(t,iq,<span class="string">'r'</span>,<span class="string">'LineWidth'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,iqr,<span class="string">'g'</span>,<span class="string">'LineWidth'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(t,iqc,<span class="string">'b'</span>,<span class="string">'LineWidth'</span>,<span class="number">1</span>)</span><br><span class="line">grid on</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> DSP平台 </tag>
            
            <tag> PMSM </tag>
            
            <tag> UDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不懂的知识点 查阅 汇总</title>
      <link href="/2019/08/01/%E4%B8%8D%E6%87%82%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2019/08/01/%E4%B8%8D%E6%87%82%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="单工、半双工和全双工的区别"><a href="#单工、半双工和全双工的区别" class="headerlink" title="单工、半双工和全双工的区别"></a>单工、半双工和全双工的区别</h2><ul><li>一、单工<br>1、数据只在一个方向上传输，不能实现双方通信。</li></ul><p>2、栗子：电视、广播。</p><ul><li>二、半双工<br>1、允许数据在两个方向上传输，但是同一时间数据只能在一个方向上传输，其实际上是切换的单工。</li></ul><p>2、栗子：对讲机。</p><ul><li>三、全双工<br>1、允许数据在两个方向上同时传输。</li></ul><p>2、栗子：手机通话。</p><hr><h2 id="TCP-IP-（传输控制协议）Transmission-Control-Protocol"><a href="#TCP-IP-（传输控制协议）Transmission-Control-Protocol" class="headerlink" title="TCP/IP （传输控制协议）Transmission Control Protocol"></a>TCP/IP （传输控制协议）Transmission Control Protocol</h2><ul><li><p>TCP 用于应用程序之间的通信。<br>当应用程序希望通过 TCP 与另一个应用程序通信时，它会发送一个通信请求。这个请求必须被送到一个确切的地址。在双方“握手”之后，TCP 将在两个应用程序之间建立一个全双工 (full-duplex) 的通信。</p></li><li><p>IP 用于计算机之间的通信。<br>IP 是无连接的通信协议。它不会占用两个正在通信的计算机之间的通信线路。这样，IP 就降低了对网络线路的需求。每条线可以同时满足许多不同的计算机之间的通信需要。</p></li><li><p>TCP/IP 意味着 TCP 和 IP 在一起协同工作。<br>TCP 负责应用软件（比如你的浏览器）和网络软件之间的通信。<br>IP 负责计算机之间的通信。<br>TCP 负责将数据分割并装入 IP 包，然后在它们到达的时候重新组合它们。<br>IP 负责将包发送至接受者。</p></li></ul><hr><h2 id="api-（应用程序编程接口）"><a href="#api-（应用程序编程接口）" class="headerlink" title="api （应用程序编程接口）"></a>api （应用程序编程接口）</h2><p>API 是一套明确定义的各种软件组件之间的通信方法。</p><hr><h3 id="http、MQTT、CoAP"><a href="#http、MQTT、CoAP" class="headerlink" title="http、MQTT、CoAP"></a>http、MQTT、CoAP</h3><p>HTTP是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。</p><p>MQTT（Message Queuing Telemetry Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的”轻量级”通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。<strong>支持长连接！适用于抄表</strong></p><blockquote><p><img src="https://s2.ax1x.com/2019/08/03/eDkio6.png" alt="eDkio6.png"></p></blockquote><p>CoAP 由于物联网中的很多设备都是资源受限型的，即只有少量的内存空间和有限的计算能力，所以传统的HTTP协议应用在物联网上就显得过于庞大而不适用。 IETF的CoRE工作组提出了一种基于REST架构的CoAP协议;是一种在物联网世界的类web协议。<strong>不支持长连接 基于UDO 可靠性不高 适用于智能家居</strong></p><p><img src="https://s2.ax1x.com/2019/08/03/eDk8fS.png" alt="eDk8fS.png"></p><hr><h2 id="OSI七层模型-TCP-IP五层模型："><a href="#OSI七层模型-TCP-IP五层模型：" class="headerlink" title="OSI七层模型/TCP/IP五层模型："></a>OSI七层模型/TCP/IP五层模型：</h2><h3 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h3><p>(整个过程以公司A和公司B的一次商业报价单发送为例子进行讲解。)</p><ul><li>&lt;1&gt;    应用层</li></ul><p>OSI参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。我们常见应用层的网络服务协议有：HTTP，HTTPS，FTP，POP3、SMTP等。</p><blockquote><p>实际公司A的老板就是我们所述的用户，而他要发送的商业报价单，就是应用层提供的一种网络服务，当然，老板也可以选择其他服务，比如说，发一份商业合同，发一份询&gt; 价单，等等。</p></blockquote><ul><li>&lt;2&gt;表示层</li></ul><p>表示层提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。</p><blockquote><p>由于公司A和公司B是不同国家的公司，他们之间的商定统一用英语作为交流的语言，所以此时表示层（公司的文秘），就是将应用层的传递信息转翻译成英语。同时为了防止别的公司看到，公司A的人也会对这份报价单做一些加密的处理。这就是表示的作用，将应用层的数据转换翻译等。</p></blockquote><ul><li>&lt;3&gt;会话</li></ul><p>会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p><blockquote><p>会话层的同事拿到表示层的同事转换后资料，（会话层的同事类似公司的外联部），会话层的同事那里可能会掌握本公司与其他好多公司的联系方式，这里公司就是实际传递过程中的实体。他们要管理本公司与外界好多公司的联系会话。当接收到表示层的数据后，会话层将会建立并记录本次会话，他首先要找到公司B的地址信息，然后将整份资料放进信封，并写上地址和联系方式。准备将资料寄出。等到确定公司B接收到此份报价单后，此次会话就算结束了，外联部的同事就会终止此次会话。</p></blockquote><ul><li>&lt;4&gt;传输层</li></ul><p>传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的， <strong>TCP UDP</strong> 就是在这一层。端口号既是这里的“端”。</p><blockquote><p>传输层就相当于公司中的负责快递邮件收发的人，公司自己的投递员，他们负责将上一层的要寄出的资料投递到快递公司或邮局。</p></blockquote><ul><li>&lt;5&gt;网络层</li></ul><p>本层通过IP寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的IP层。这一层就是我们经常说的IP协议层。IP协议是Internet的基础。</p><blockquote><p>网络层就相当于快递公司庞大的快递网络，全国不同的集散中心，比如说，从深圳发往北京的顺丰快递（陆运为例啊，空运好像直接就飞到北京了），首先要到顺丰的深圳集散中心，从深圳集散中心再送到武汉集散中心，从武汉集散中心再寄到北京顺义集散中心。这个每个集散中心，就相当于网络中的一个IP节点。</p></blockquote><ul><li>&lt;6&gt;数据链路层 </li></ul><p>将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。<br>数据链路层又分为2个子层：逻辑链路控制子层（LLC）和媒体访问控制子层（MAC）。<br>MAC子层处理CSMA/CD算法、数据出错校验、成帧等；LLC子层定义了一些字段使上次协议能共享数据链路层。 在实际使用中，LLC子层并非必需的。</p><blockquote><p>这个没找到合适的例子</p></blockquote><ul><li>&lt;7&gt; 物理层  </li></ul><p>实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。</p><blockquote><p>快递寄送过程中的交通工具，就相当于我们的物理层，例如汽车，火车，飞机，船。</p></blockquote><p>[<img src="https://s2.ax1x.com/2019/08/02/e0sspV.png" alt="e0sspV.png"></p><hr><h3 id="TCP-IP五层模型"><a href="#TCP-IP五层模型" class="headerlink" title="TCP/IP五层模型"></a>TCP/IP五层模型</h3><p> TCP/IP五层协议和OSI的七层协议对应关系如下。 在每一层都工作着不同的设备，比如我们常用的交换机就工作在数据链路层的，一般的路由器是工作在网络层的。<br><img src="https://s2.ax1x.com/2019/08/02/e0sHXD.png" alt="e0sHXD.png"><br> 在每一层实现的协议也各不同，即每一层的服务也不同。下图列出了每层主要的协议。<br><img src="https://s2.ax1x.com/2019/08/02/e0sqne.png" alt="e0sqne.png"></p><hr><h2 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h2><p>  鉴权（authentication）是指验证用户是否拥有访问系统的权利。</p><hr><h2 id="CIG、IOCM、DM-Server、Mongo-DB"><a href="#CIG、IOCM、DM-Server、Mongo-DB" class="headerlink" title="CIG、IOCM、DM Server、Mongo DB"></a>CIG、IOCM、DM Server、Mongo DB</h2><p>CIG (Cell Interconnection Gateway) 信元互连网关</p><hr><h2 id="color-red-未完待续"><a href="#color-red-未完待续" class="headerlink" title="$\color{red}{未完待续~~}$"></a><strong>$\color{red}{未完待续~~}$</strong></h2>]]></content>
      
      
      
        <tags>
            
            <tag> IOT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交流电机前言讲座考试总结</title>
      <link href="/2019/07/29/%E4%BA%A4%E6%B5%81%E7%94%B5%E6%9C%BA%E5%89%8D%E6%B2%BF%E8%AE%B2%E5%BA%A7%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>/2019/07/29/%E4%BA%A4%E6%B5%81%E7%94%B5%E6%9C%BA%E5%89%8D%E6%B2%BF%E8%AE%B2%E5%BA%A7%E8%80%83%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>简单的做一下知识点梳理。</p><h1 id="电机的控制问题"><a href="#电机的控制问题" class="headerlink" title="电机的控制问题"></a>电机的控制问题</h1><p><img src="https://s2.ax1x.com/2019/07/27/eMwp1H.png" alt="eMwp1H.png"></p><h1 id="交流电机"><a href="#交流电机" class="headerlink" title="交流电机"></a>交流电机</h1><p><img src="https://s2.ax1x.com/2019/07/27/eMdBtS.png" alt="eMdBtS.png"></p><h1 id="同步电机"><a href="#同步电机" class="headerlink" title="同步电机"></a>同步电机</h1><p><a href="https://imgchr.com/i/e881Jg" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/07/29/e881Jg.png" alt="e881Jg.png"></a></p><h1 id="附赠：电机的应用"><a href="#附赠：电机的应用" class="headerlink" title="附赠：电机的应用"></a>附赠：电机的应用</h1><p><img src="https://s2.ax1x.com/2019/07/28/e1kE8g.jpg" alt="e1kE8g.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kmKs.jpg" alt="e1kmKs.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kV2Q.jpg" alt="e1kV2Q.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1knrn.jpg" alt="e1knrn.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kZvj.jpg" alt="e1kZvj.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kubq.jpg" alt="e1kubq.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kMV0.jpg" alt="e1kMV0.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kQaV.jpg" alt="e1kQaV.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kl5T.jpg" alt="e1kl5T.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1k3PU.jpg" alt="e1k3PU.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1k8GF.jpg" alt="e1k8GF.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kG24.jpg" alt="e1kG24.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kJxJ.jpg" alt="e1kJxJ.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1ktM9.jpg" alt="e1ktM9.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kNrR.jpg" alt="e1kNrR.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kUq1.jpg" alt="e1kUq1.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kdVx.jpg" alt="e1kdVx.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kwa6.jpg" alt="e1kwa6.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1k0IK.jpg" alt="e1k0IK.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kDPO.jpg" alt="e1kDPO.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1krGD.jpg" alt="e1krGD.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1ksRe.jpg" alt="e1ksRe.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kyxH.jpg" alt="e1kyxH.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kcMd.jpg" alt="e1kcMd.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kgsA.jpg" alt="e1kgsA.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1k2qI.jpg" alt="e1k2qI.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kWZt.jpg" alt="e1kWZt.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kfdP.jpg" alt="e1kfdP.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1khIf.jpg" alt="e1khIf.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1k5i8.jpg" alt="e1k5i8.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kIJS.jpg" alt="e1kIJS.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1koRg.jpg" alt="e1koRg.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kTzQ.jpg" alt="e1kTzQ.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kHMj.jpg" alt="e1kHMj.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kbss.jpg" alt="e1kbss.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kqLn.jpg" alt="e1kqLn.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kOZq.jpg" alt="e1kOZq.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kXd0.jpg" alt="e1kXd0.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kxiT.jpg" alt="e1kxiT.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1kzJU.jpg" alt="e1kzJU.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1Apz4.jpg" alt="e1Apz4.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1ACQJ.jpg" alt="e1ACQJ.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1APy9.jpg" alt="e1APy9.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1Ake1.jpg" alt="e1Ake1.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AEo6.jpg" alt="e1AEo6.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AmWD.jpg" alt="e1AmWD.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AKQH.jpg" alt="e1AKQH.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AQOA.jpg" alt="e1AQOA.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1A1eI.jpg" alt="e1A1eI.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AJFf.jpg" alt="e1AJFf.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AUSg.jpg" alt="e1AUSg.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AalQ.jpg" alt="e1AalQ.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AwOs.jpg" alt="e1AwOs.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1ABmn.jpg" alt="e1ABmn.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1ADwq.jpg" alt="e1ADwq.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1ArT0.jpg" alt="e1ArT0.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1A6YT.jpg" alt="e1A6YT.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AcfU.jpg" alt="e1AcfU.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1A2pF.jpg" alt="e1A2pF.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1ARl4.jpg" alt="e1ARl4.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AW6J.jpg" alt="e1AW6J.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AfX9.jpg" alt="e1AfX9.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1A4mR.jpg" alt="e1A4mR.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1A501.jpg" alt="e1A501.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AITx.jpg" alt="e1AITx.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1ATk6.jpg" alt="e1ATk6.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1A7tK.jpg" alt="e1A7tK.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AHfO.jpg" alt="e1AHfO.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AqpD.jpg" alt="e1AqpD.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AL1e.jpg" alt="e1AL1e.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AO6H.jpg" alt="e1AO6H.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AXXd.jpg" alt="e1AXXd.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1AvnA.jpg" alt="e1AvnA.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1Az7t.jpg" alt="e1Az7t.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EpAP.jpg" alt="e1EpAP.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1E9tf.jpg" alt="e1E9tf.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1ECh8.jpg" alt="e1ECh8.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1Ei9S.jpg" alt="e1Ei9S.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EF1g.jpg" alt="e1EF1g.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EkcQ.jpg" alt="e1EkcQ.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EAXj.jpg" alt="e1EAXj.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EVns.jpg" alt="e1EVns.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EZBn.jpg" alt="e1EZBn.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1Ee7q.jpg" alt="e1Ee7q.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EnA0.jpg" alt="e1EnA0.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EuNV.jpg" alt="e1EuNV.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EQ9U.jpg" alt="e1EQ9U.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1E1c4.jpg" alt="e1E1c4.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EGu9.jpg" alt="e1EGu9.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EYH1.jpg" alt="e1EYH1.jpg"><br><img src="https://s2.ax1x.com/2019/07/28/e1EUN6.jpg" alt="e1EUN6.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> PMSM </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于404问题及感谢</title>
      <link href="/2019/07/24/%E5%85%B3%E4%BA%8E404%E9%97%AE%E9%A2%98%E5%8F%8A%E6%84%9F%E8%B0%A2/"/>
      <url>/2019/07/24/%E5%85%B3%E4%BA%8E404%E9%97%AE%E9%A2%98%E5%8F%8A%E6%84%9F%E8%B0%A2/</url>
      
        <content type="html"><![CDATA[<ol><li><p>CNAME里面是写xxx.github.io</p></li><li><p>解析域名的时候最好用CNAME并 解析到 xxx.github.io</p></li><li><p>GitHub 仓库里的Setting 最好也改成<a href="http://www.xxx.xxx" target="_blank" rel="noopener">www.xxx.xxx</a></p></li></ol><p><strong>顺便感谢一下搭建博客参考网站</strong></p><p><a href="https://www.bilibili.com/video/av44544186" title="CodeSheep" target="_blank" rel="noopener">UP：CodeSheep</a></p><p><a href="https://www.bilibili.com/video/av23913382" title="吃饱睡觉的猫" target="_blank" rel="noopener">UP：吃饱睡觉的猫</a></p><p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial" title="遇见西门" target="_blank" rel="noopener"> 遇见西门</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>my first generage blog</title>
      <link href="/2019/07/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/07/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>第一个博客 杠杠滴</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于dsp平台电流环解耦</title>
      <link href="/2019/07/23/%E5%85%B3%E4%BA%8EDSP%E5%B9%B3%E5%8F%B0%E7%94%B5%E6%B5%81%E7%8E%AF%E8%A7%A3%E8%80%A6/"/>
      <url>/2019/07/23/%E5%85%B3%E4%BA%8EDSP%E5%B9%B3%E5%8F%B0%E7%94%B5%E6%B5%81%E7%8E%AF%E8%A7%A3%E8%80%A6/</url>
      
        <content type="html"><![CDATA[<p><strong>120V电压 400rpm的给定电流</strong></p><p>应该加的补偿值</p><p>​<br><code>ttt = 0.00105 \* \_IQmpy(pi_id.Fbk,pi_spd.Fbk) \* 4500 \* 9 /(volt1.DcBusVolt\*409.9) + 0.065 \* pi_spd.Fbk \* 4500 /(volt1.DcBusVolt\*409.9);</code></p><p>下面是解耦后应该的公式.</p><p>​<code>ipark1.Qs = pi_iq.Out + ttt;​</code></p><p>在未解耦的时候，测得ipark1.Qs = 0.515 . 换算成真实的电压值为(乘当前的电流值) 0.515 * 120 V=61.8V</p><p>测得ttt = 0.22 . 换算成真实的电压值为26.4V.</p><p>ttt的主要成份是反电势 ​<code>flux\*we=0.1552\*400\*4\*3.14/30=26.0V​</code></p><p>所以证明电流环解耦 程序是正确的.</p><p><img src="https://s2.ax1x.com/2019/07/24/eAzypd.png" alt="解耦前后对比"></p><p>实验结果 （右为解耦）</p>]]></content>
      
      
      
        <tags>
            
            <tag> DSP平台 </tag>
            
            <tag> PMSM </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
